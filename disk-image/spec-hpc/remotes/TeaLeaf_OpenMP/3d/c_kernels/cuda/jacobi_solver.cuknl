#include "cudaknl_shared.hpp"

// Core computation for Jacobi solver.
__global__ void jacobi_iterate(
		const int x_inner,
		const int y_inner,
		const int z_inner,
        const int halo_depth,
		const double* vec_kx,
		const double* vec_ky,
		const double* vec_kz,
		const double* vec_u0,
		const double* vec_r,
		double* vec_u,
		double* error)
{
	__shared__ double error_local[BLOCK_SIZE];

	const int gid = threadIdx.x+blockIdx.x*blockDim.x;
    const int x = x_inner + 2*halo_depth;
    const int y = y_inner + 2*halo_depth;
    const int page = x*y;
	const int col = gid%x_inner;
	const int row = (gid/x_inner)%y_inner; 
	const int slice = gid/(x_inner*y_inner); 
	const int off0 = halo_depth*(page+x+1);
	const int index = off0+col+row*x+slice*page;

	if(gid < x_inner*y_inner*z_inner)
	{
		u[index] = (u0[index] 
				+ vec_kx[index+1]*r[index+1] 
				+ vec_kx[index]*r[index-1]
				+ vec_ky[index+x]*r[index+x] 
				+ vec_ky[index]*r[index-x]
				+ vec_kz[index+page]*r[index+page] 
				+ vec_kz[index]*r[index-page])
			/ (1.0 + (vec_kx[index]+vec_kx[index+1])
					+ (vec_ky[index]+vec_ky[index+x])
					+ (vec_kz[index]+vec_kz[index+page]));

		error_local[threadIdx.x] = fabs(u[index]-r[index]);
	}
	else
	{
		error_local[threadIdx.x] = 0.0;
	}

	Reduce<double, BLOCK_SIZE/2>::Run(error_local, error, SUM);
}

__global__ void jacobi_init(
		const int x_inner,
		const int y_inner,
		const int z_inner,
        const int halo_depth,
		const double* density,
		const double* energy,
		const double rx,
		const double ry,
		const double rz,
		double* vec_kx,
		double* vec_ky,
		double* vec_kz,
		double* vec_u0,
		double* vec_u,
		const int coefficient)
{
	const int gid = threadIdx.x+blockIdx.x*blockDim.x;
	if(gid >= x_inner*y_inner*z_inner) return;

    const int x = x_inner + 2*halo_depth;
    const int y = y_inner + 2*halo_depth;
    const int page = x*y;
	const int col = gid%x_inner;
	const int row = (gid/x_inner)%y_inner; 
	const int slice = gid/(x_inner*y_inner); 
	const int off0 = halo_depth*(page+x+1);
	const int index = off0+col+row*x+slice*page;

	const double u_temp = energy[index]*density[index];
	u0[index] = u_temp;
	u[index] = u_temp;

	if(row == 0 || col == 0 || slice == 0) return; 

	double density_center;
	double density_left;
	double density_down;
	double density_back;

	if(coefficient == CONDUCTIVITY)
	{
		density_center = density[index];
		density_left = density[index-1];
		density_down = density[index-x];
		density_back = density[index-page];
	}
	else if(coefficient == RECIP_CONDUCTIVITY)
	{
		density_center = 1.0/density[index];
		density_left = 1.0/density[index-1];
		density_down = 1.0/density[index-x];
		density_back = 1.0/density[index-page];
	}

	vec_kx[index] = rx*(density_left+density_center)/(2.0*density_left*density_center);
	vec_ky[index] = ry*(density_down+density_center)/(2.0*density_down*density_center);
	vec_kz[index] = rz*(density_back+density_center)/(2.0*density_back*density_center);
}

__global__ void jacobi_copy_u(
		const int x_inner,
		const int y_inner,
		const int z_inner,
		const double* src,
		double* dest)
{
	const int gid = threadIdx.x+blockIdx.x*blockDim.x;

	if(gid < x_inner*y_inner*z_inner)
    {
		dest[gid] = src[gid];	
    }
}
