
__global__ void cheby_init(
		const int x_inner,
		const int y_inner,
		const int z_inner,
        const int halo_depth,
		const double* u,
		const double* u0,
		const double* vec_kx,
		const double* vec_ky,
		const double* vec_kz,
		const double theta,
		double* vec_p,
		double* vec_r,
		double* vec_w)
{
	const int gid = threadIdx.x+blockIdx.x*blockDim.x;
	if(gid >= x_inner*y_inner*z_inner) return;

    const int x = x_inner + 2*halo_depth;
    const int y = y_inner + 2*halo_depth;
    const int page = x*y;
	const int col = gid%x_inner;
	const int row = (gid/x_inner)%y_inner; 
	const int slice = gid/(x_inner*y_inner); 
	const int off0 = halo_depth*(page+x+1);
	const int index = off0+col+row*x+slice*page;

	const double smvp = SMVP(vec_u);
	vec_w[index] = smvp;
	vec_r[index] = vec_u0[index] - vec_w[index];
	vec_p[index] = vec_r[index] / theta;
}

__global__ void cheby_calc_u(
		const int x_inner,
		const int y_inner,
		const int z_inner,
        const int halo_depth,
		const double* vec_p,
		double* vec_u)
{
	const int gid = threadIdx.x+blockIdx.x*blockDim.x;
	if(gid >= x_inner*y_inner*z_inner) return;

    const int x = x_inner + 2*halo_depth;
    const int y = y_inner + 2*halo_depth;
    const int page = x*y;
	const int col = gid%x_inner;
	const int row = (gid/x_inner)%y_inner; 
	const int slice = gid/(x_inner*y_inner); 
	const int off0 = halo_depth*(page+x+1);
	const int index = off0+col+row*x+slice*page;

	vec_u[index] += vec_p[index];
}

__global__ void cheby_calc_p(
		const int x_inner,
		const int y_inner,
		const int z_inner,
        const int halo_depth,
		const double* u,
		const double* u0,
		const double* vec_kx,
		const double* vec_ky,
		const double* vec_kz,
		const double alpha,
		const double beta,
		double* vec_p,
		double* vec_r,
		double* vec_w)
{
	const int gid = threadIdx.x+blockIdx.x*blockDim.x;
	if(gid >= x_inner*y_inner*z_inner) return;

    const int x = x_inner + 2*halo_depth;
    const int y = y_inner + 2*halo_depth;
    const int page = x*y;
	const int col = gid%x_inner;
	const int row = (gid/x_inner)%y_inner; 
	const int slice = gid/(x_inner*y_inner); 
	const int off0 = halo_depth*(page+x+1);
	const int index = off0+col+row*x+slice*page;

	const double smvp = SMVP(vec_u);
	vec_w[index] = smvp;
	vec_r[index] = vec_u0[index]-vec_w[index];
	vec_p[index] = alpha*vec_p[index] + beta*vec_r[index];
}
