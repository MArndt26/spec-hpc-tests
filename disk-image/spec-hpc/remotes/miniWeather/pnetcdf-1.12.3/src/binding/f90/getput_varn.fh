! Do not edit this file. It is produced from the corresponding .m4 source
!
!  Copyright (C) 2014, Northwestern University and Argonne National Laboratory
!  See COPYRIGHT notice in top-level directory.
!
! $Id$
!


   ! put a scalar of type integer (kind=OneByteInt)
   function nf90mpi_put_varn_OneByteInt(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=OneByteInt),                                   intent(in) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_OneByteInt

     nf90mpi_put_varn_OneByteInt = nfmpi_put_var1_int1(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_OneByteInt

   ! put a scalar of type integer (kind=TwoByteInt)
   function nf90mpi_put_varn_TwoByteInt(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=TwoByteInt),                                   intent(INOUT) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_TwoByteInt

     nf90mpi_put_varn_TwoByteInt = nfmpi_put_var1_int2(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_TwoByteInt

   ! put a scalar of type integer (kind=FourByteInt)
   function nf90mpi_put_varn_FourByteInt(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=FourByteInt),                                   intent(INOUT) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_FourByteInt

     nf90mpi_put_varn_FourByteInt = nfmpi_put_var1_int(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_FourByteInt

   ! put a scalar of type real (kind=FourByteReal)
   function nf90mpi_put_varn_FourByteReal(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=FourByteReal),                                   intent(INOUT) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_FourByteReal

     nf90mpi_put_varn_FourByteReal = nfmpi_put_var1_real(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_FourByteReal

   ! put a scalar of type real (kind=EightByteReal)
   function nf90mpi_put_varn_EightByteReal(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=EightByteReal),                                   intent(INOUT) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_EightByteReal

     nf90mpi_put_varn_EightByteReal = nfmpi_put_var1_double(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_EightByteReal

   ! put a scalar of type integer (kind=EightByteInt)
   function nf90mpi_put_varn_EightByteInt(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=EightByteInt),                                   intent(INOUT) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_EightByteInt

     nf90mpi_put_varn_EightByteInt = nfmpi_put_var1_int8(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_EightByteInt


   ! put a scalar of type integer (kind=OneByteInt)
   function nf90mpi_put_varn_OneByteInt_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=OneByteInt),                                   intent(in) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_OneByteInt_all

     nf90mpi_put_varn_OneByteInt_all = nfmpi_put_var1_int1_all(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_OneByteInt_all

   ! put a scalar of type integer (kind=TwoByteInt)
   function nf90mpi_put_varn_TwoByteInt_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=TwoByteInt),                                   intent(INOUT) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_TwoByteInt_all

     nf90mpi_put_varn_TwoByteInt_all = nfmpi_put_var1_int2_all(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_TwoByteInt_all

   ! put a scalar of type integer (kind=FourByteInt)
   function nf90mpi_put_varn_FourByteInt_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=FourByteInt),                                   intent(INOUT) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_FourByteInt_all

     nf90mpi_put_varn_FourByteInt_all = nfmpi_put_var1_int_all(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_FourByteInt_all

   ! put a scalar of type real (kind=FourByteReal)
   function nf90mpi_put_varn_FourByteReal_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=FourByteReal),                                   intent(INOUT) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_FourByteReal_all

     nf90mpi_put_varn_FourByteReal_all = nfmpi_put_var1_real_all(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_FourByteReal_all

   ! put a scalar of type real (kind=EightByteReal)
   function nf90mpi_put_varn_EightByteReal_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=EightByteReal),                                   intent(INOUT) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_EightByteReal_all

     nf90mpi_put_varn_EightByteReal_all = nfmpi_put_var1_double_all(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_EightByteReal_all

   ! put a scalar of type integer (kind=EightByteInt)
   function nf90mpi_put_varn_EightByteInt_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=EightByteInt),                                   intent(INOUT) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_EightByteInt_all

     nf90mpi_put_varn_EightByteInt_all = nfmpi_put_var1_int8_all(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_EightByteInt_all


   ! get a scalar of type integer (kind=OneByteInt)
   function nf90mpi_get_varn_OneByteInt(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=OneByteInt),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_OneByteInt

     nf90mpi_get_varn_OneByteInt = nfmpi_get_var1_int1(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_OneByteInt

   ! get a scalar of type integer (kind=TwoByteInt)
   function nf90mpi_get_varn_TwoByteInt(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=TwoByteInt),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_TwoByteInt

     nf90mpi_get_varn_TwoByteInt = nfmpi_get_var1_int2(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_TwoByteInt

   ! get a scalar of type integer (kind=FourByteInt)
   function nf90mpi_get_varn_FourByteInt(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=FourByteInt),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_FourByteInt

     nf90mpi_get_varn_FourByteInt = nfmpi_get_var1_int(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_FourByteInt

   ! get a scalar of type real (kind=FourByteReal)
   function nf90mpi_get_varn_FourByteReal(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=FourByteReal),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_FourByteReal

     nf90mpi_get_varn_FourByteReal = nfmpi_get_var1_real(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_FourByteReal

   ! get a scalar of type real (kind=EightByteReal)
   function nf90mpi_get_varn_EightByteReal(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=EightByteReal),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_EightByteReal

     nf90mpi_get_varn_EightByteReal = nfmpi_get_var1_double(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_EightByteReal

   ! get a scalar of type integer (kind=EightByteInt)
   function nf90mpi_get_varn_EightByteInt(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=EightByteInt),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_EightByteInt

     nf90mpi_get_varn_EightByteInt = nfmpi_get_var1_int8(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_EightByteInt


   ! get a scalar of type integer (kind=OneByteInt)
   function nf90mpi_get_varn_OneByteInt_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=OneByteInt),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_OneByteInt_all

     nf90mpi_get_varn_OneByteInt_all = nfmpi_get_var1_int1_all(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_OneByteInt_all

   ! get a scalar of type integer (kind=TwoByteInt)
   function nf90mpi_get_varn_TwoByteInt_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=TwoByteInt),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_TwoByteInt_all

     nf90mpi_get_varn_TwoByteInt_all = nfmpi_get_var1_int2_all(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_TwoByteInt_all

   ! get a scalar of type integer (kind=FourByteInt)
   function nf90mpi_get_varn_FourByteInt_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=FourByteInt),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_FourByteInt_all

     nf90mpi_get_varn_FourByteInt_all = nfmpi_get_var1_int_all(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_FourByteInt_all

   ! get a scalar of type real (kind=FourByteReal)
   function nf90mpi_get_varn_FourByteReal_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=FourByteReal),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_FourByteReal_all

     nf90mpi_get_varn_FourByteReal_all = nfmpi_get_var1_real_all(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_FourByteReal_all

   ! get a scalar of type real (kind=EightByteReal)
   function nf90mpi_get_varn_EightByteReal_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=EightByteReal),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_EightByteReal_all

     nf90mpi_get_varn_EightByteReal_all = nfmpi_get_var1_double_all(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_EightByteReal_all

   ! get a scalar of type integer (kind=EightByteInt)
   function nf90mpi_get_varn_EightByteInt_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=EightByteInt),                                   intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_EightByteInt_all

     nf90mpi_get_varn_EightByteInt_all = nfmpi_get_var1_int8_all(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_EightByteInt_all



!
! put APIs
!

   function nf90mpi_put_varn_1D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_OneByteInt

   function nf90mpi_put_varn_2D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_OneByteInt

   function nf90mpi_put_varn_3D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_OneByteInt

   function nf90mpi_put_varn_4D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_OneByteInt

   function nf90mpi_put_varn_5D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_OneByteInt

   function nf90mpi_put_varn_6D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_OneByteInt

   function nf90mpi_put_varn_7D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_OneByteInt = nfmpi_put_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_OneByteInt


   function nf90mpi_put_varn_1D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_TwoByteInt

   function nf90mpi_put_varn_2D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_TwoByteInt

   function nf90mpi_put_varn_3D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_TwoByteInt

   function nf90mpi_put_varn_4D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_TwoByteInt

   function nf90mpi_put_varn_5D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_TwoByteInt

   function nf90mpi_put_varn_6D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_TwoByteInt

   function nf90mpi_put_varn_7D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_TwoByteInt = nfmpi_put_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_TwoByteInt


   function nf90mpi_put_varn_1D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_FourByteInt

   function nf90mpi_put_varn_2D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_FourByteInt

   function nf90mpi_put_varn_3D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_FourByteInt

   function nf90mpi_put_varn_4D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_FourByteInt

   function nf90mpi_put_varn_5D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_FourByteInt

   function nf90mpi_put_varn_6D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_FourByteInt

   function nf90mpi_put_varn_7D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_FourByteInt = nfmpi_put_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_FourByteInt


   function nf90mpi_put_varn_1D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_FourByteReal

   function nf90mpi_put_varn_2D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_FourByteReal

   function nf90mpi_put_varn_3D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_FourByteReal

   function nf90mpi_put_varn_4D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_FourByteReal

   function nf90mpi_put_varn_5D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_FourByteReal

   function nf90mpi_put_varn_6D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_FourByteReal

   function nf90mpi_put_varn_7D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_FourByteReal = nfmpi_put_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_FourByteReal


   function nf90mpi_put_varn_1D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_EightByteReal

   function nf90mpi_put_varn_2D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_EightByteReal

   function nf90mpi_put_varn_3D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_EightByteReal

   function nf90mpi_put_varn_4D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_EightByteReal

   function nf90mpi_put_varn_5D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_EightByteReal

   function nf90mpi_put_varn_6D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_EightByteReal

   function nf90mpi_put_varn_7D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_EightByteReal = nfmpi_put_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_EightByteReal


   function nf90mpi_put_varn_1D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_EightByteInt

   function nf90mpi_put_varn_2D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_EightByteInt

   function nf90mpi_put_varn_3D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_EightByteInt

   function nf90mpi_put_varn_4D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_EightByteInt

   function nf90mpi_put_varn_5D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_EightByteInt

   function nf90mpi_put_varn_6D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_EightByteInt

   function nf90mpi_put_varn_7D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_EightByteInt = nfmpi_put_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_EightByteInt


!
! get APIs
!

   function nf90mpi_get_varn_1D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_OneByteInt

   function nf90mpi_get_varn_2D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_OneByteInt

   function nf90mpi_get_varn_3D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_OneByteInt

   function nf90mpi_get_varn_4D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_OneByteInt

   function nf90mpi_get_varn_5D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_OneByteInt

   function nf90mpi_get_varn_6D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_OneByteInt

   function nf90mpi_get_varn_7D_OneByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_OneByteInt = nfmpi_get_varn_int1(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_OneByteInt


   function nf90mpi_get_varn_1D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_TwoByteInt

   function nf90mpi_get_varn_2D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_TwoByteInt

   function nf90mpi_get_varn_3D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_TwoByteInt

   function nf90mpi_get_varn_4D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_TwoByteInt

   function nf90mpi_get_varn_5D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_TwoByteInt

   function nf90mpi_get_varn_6D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_TwoByteInt

   function nf90mpi_get_varn_7D_TwoByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_TwoByteInt = nfmpi_get_varn_int2(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_TwoByteInt


   function nf90mpi_get_varn_1D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_FourByteInt

   function nf90mpi_get_varn_2D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_FourByteInt

   function nf90mpi_get_varn_3D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_FourByteInt

   function nf90mpi_get_varn_4D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_FourByteInt

   function nf90mpi_get_varn_5D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_FourByteInt

   function nf90mpi_get_varn_6D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_FourByteInt

   function nf90mpi_get_varn_7D_FourByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_FourByteInt = nfmpi_get_varn_int(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_FourByteInt


   function nf90mpi_get_varn_1D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_FourByteReal

   function nf90mpi_get_varn_2D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_FourByteReal

   function nf90mpi_get_varn_3D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_FourByteReal

   function nf90mpi_get_varn_4D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_FourByteReal

   function nf90mpi_get_varn_5D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_FourByteReal

   function nf90mpi_get_varn_6D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_FourByteReal

   function nf90mpi_get_varn_7D_FourByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_FourByteReal = nfmpi_get_varn_real(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_FourByteReal


   function nf90mpi_get_varn_1D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_EightByteReal

   function nf90mpi_get_varn_2D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_EightByteReal

   function nf90mpi_get_varn_3D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_EightByteReal

   function nf90mpi_get_varn_4D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_EightByteReal

   function nf90mpi_get_varn_5D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_EightByteReal

   function nf90mpi_get_varn_6D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_EightByteReal

   function nf90mpi_get_varn_7D_EightByteReal(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_EightByteReal = nfmpi_get_varn_double(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_EightByteReal


   function nf90mpi_get_varn_1D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_EightByteInt

   function nf90mpi_get_varn_2D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_EightByteInt

   function nf90mpi_get_varn_3D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_EightByteInt

   function nf90mpi_get_varn_4D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_EightByteInt

   function nf90mpi_get_varn_5D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_EightByteInt

   function nf90mpi_get_varn_6D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_EightByteInt

   function nf90mpi_get_varn_7D_EightByteInt(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_EightByteInt = nfmpi_get_varn_int8(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_EightByteInt


!
! collective put APIs
!

   function nf90mpi_put_varn_1D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_OneByteInt_all

   function nf90mpi_put_varn_2D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_OneByteInt_all

   function nf90mpi_put_varn_3D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_OneByteInt_all

   function nf90mpi_put_varn_4D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_OneByteInt_all

   function nf90mpi_put_varn_5D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_OneByteInt_all

   function nf90mpi_put_varn_6D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_OneByteInt_all

   function nf90mpi_put_varn_7D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_OneByteInt_all = nfmpi_put_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_OneByteInt_all


   function nf90mpi_put_varn_1D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_TwoByteInt_all

   function nf90mpi_put_varn_2D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_TwoByteInt_all

   function nf90mpi_put_varn_3D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_TwoByteInt_all

   function nf90mpi_put_varn_4D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_TwoByteInt_all

   function nf90mpi_put_varn_5D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_TwoByteInt_all

   function nf90mpi_put_varn_6D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_TwoByteInt_all

   function nf90mpi_put_varn_7D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_TwoByteInt_all = nfmpi_put_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_TwoByteInt_all


   function nf90mpi_put_varn_1D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_FourByteInt_all

   function nf90mpi_put_varn_2D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_FourByteInt_all

   function nf90mpi_put_varn_3D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_FourByteInt_all

   function nf90mpi_put_varn_4D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_FourByteInt_all

   function nf90mpi_put_varn_5D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_FourByteInt_all

   function nf90mpi_put_varn_6D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_FourByteInt_all

   function nf90mpi_put_varn_7D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_FourByteInt_all = nfmpi_put_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_FourByteInt_all


   function nf90mpi_put_varn_1D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_FourByteReal_all

   function nf90mpi_put_varn_2D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_FourByteReal_all

   function nf90mpi_put_varn_3D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_FourByteReal_all

   function nf90mpi_put_varn_4D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_FourByteReal_all

   function nf90mpi_put_varn_5D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_FourByteReal_all

   function nf90mpi_put_varn_6D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_FourByteReal_all

   function nf90mpi_put_varn_7D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_FourByteReal_all = nfmpi_put_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_FourByteReal_all


   function nf90mpi_put_varn_1D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_EightByteReal_all

   function nf90mpi_put_varn_2D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_EightByteReal_all

   function nf90mpi_put_varn_3D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_EightByteReal_all

   function nf90mpi_put_varn_4D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_EightByteReal_all

   function nf90mpi_put_varn_5D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_EightByteReal_all

   function nf90mpi_put_varn_6D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_EightByteReal_all

   function nf90mpi_put_varn_7D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_EightByteReal_all = nfmpi_put_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_EightByteReal_all


   function nf90mpi_put_varn_1D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_EightByteInt_all

   function nf90mpi_put_varn_2D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_EightByteInt_all

   function nf90mpi_put_varn_3D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_EightByteInt_all

   function nf90mpi_put_varn_4D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_EightByteInt_all

   function nf90mpi_put_varn_5D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_EightByteInt_all

   function nf90mpi_put_varn_6D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_EightByteInt_all

   function nf90mpi_put_varn_7D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_EightByteInt_all = nfmpi_put_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_EightByteInt_all


!
! collective get APIs
!

   function nf90mpi_get_varn_1D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_OneByteInt_all

   function nf90mpi_get_varn_2D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_OneByteInt_all

   function nf90mpi_get_varn_3D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_OneByteInt_all

   function nf90mpi_get_varn_4D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_OneByteInt_all

   function nf90mpi_get_varn_5D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_OneByteInt_all

   function nf90mpi_get_varn_6D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_OneByteInt_all

   function nf90mpi_get_varn_7D_OneByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_OneByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_OneByteInt_all = nfmpi_get_varn_int1_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_OneByteInt_all


   function nf90mpi_get_varn_1D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_TwoByteInt_all

   function nf90mpi_get_varn_2D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_TwoByteInt_all

   function nf90mpi_get_varn_3D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_TwoByteInt_all

   function nf90mpi_get_varn_4D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_TwoByteInt_all

   function nf90mpi_get_varn_5D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_TwoByteInt_all

   function nf90mpi_get_varn_6D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_TwoByteInt_all

   function nf90mpi_get_varn_7D_TwoByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_TwoByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_TwoByteInt_all = nfmpi_get_varn_int2_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_TwoByteInt_all


   function nf90mpi_get_varn_1D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_FourByteInt_all

   function nf90mpi_get_varn_2D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_FourByteInt_all

   function nf90mpi_get_varn_3D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_FourByteInt_all

   function nf90mpi_get_varn_4D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_FourByteInt_all

   function nf90mpi_get_varn_5D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_FourByteInt_all

   function nf90mpi_get_varn_6D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_FourByteInt_all

   function nf90mpi_get_varn_7D_FourByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_FourByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_FourByteInt_all = nfmpi_get_varn_int_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_FourByteInt_all


   function nf90mpi_get_varn_1D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_FourByteReal_all

   function nf90mpi_get_varn_2D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_FourByteReal_all

   function nf90mpi_get_varn_3D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_FourByteReal_all

   function nf90mpi_get_varn_4D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_FourByteReal_all

   function nf90mpi_get_varn_5D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_FourByteReal_all

   function nf90mpi_get_varn_6D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_FourByteReal_all

   function nf90mpi_get_varn_7D_FourByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_FourByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_FourByteReal_all = nfmpi_get_varn_real_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_FourByteReal_all


   function nf90mpi_get_varn_1D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_EightByteReal_all

   function nf90mpi_get_varn_2D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_EightByteReal_all

   function nf90mpi_get_varn_3D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_EightByteReal_all

   function nf90mpi_get_varn_4D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_EightByteReal_all

   function nf90mpi_get_varn_5D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_EightByteReal_all

   function nf90mpi_get_varn_6D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_EightByteReal_all

   function nf90mpi_get_varn_7D_EightByteReal_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_EightByteReal_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_EightByteReal_all = nfmpi_get_varn_double_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_EightByteReal_all


   function nf90mpi_get_varn_1D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_EightByteInt_all

   function nf90mpi_get_varn_2D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_EightByteInt_all

   function nf90mpi_get_varn_3D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_EightByteInt_all

   function nf90mpi_get_varn_4D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_EightByteInt_all

   function nf90mpi_get_varn_5D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_EightByteInt_all

   function nf90mpi_get_varn_6D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_EightByteInt_all

   function nf90mpi_get_varn_7D_EightByteInt_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       count, values)
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_EightByteInt_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_EightByteInt_all = nfmpi_get_varn_int8_all(ncid, varid, num, start, &
                                                       localCount, values)
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_EightByteInt_all


!
! text variable
!


   ! put a scalar of type character (len = *)
   function nf90mpi_put_varn_text(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     character (len=*),                              intent(in) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_text

     nf90mpi_put_varn_text = nfmpi_put_var1_text(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_text

   ! get a scalar of type character (len = *)
   function nf90mpi_get_varn_text(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     character (len=*),                              intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_text

     nf90mpi_get_varn_text = nfmpi_get_var1_text(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_text

   ! put a scalar of type character (len = *)
   function nf90mpi_put_varn_text_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     character (len=*),                              intent(in) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_put_varn_text_all

     nf90mpi_put_varn_text_all = nfmpi_put_var1_text_all(ncid, varid, start(:,1), value)
   end function nf90mpi_put_varn_text_all

   ! get a scalar of type character (len = *)
   function nf90mpi_get_varn_text_all(ncid, varid, value, start)
     integer,                                        intent(in) :: ncid, varid
     character (len=*),                              intent(out) :: value
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_get_varn_text_all

     nf90mpi_get_varn_text_all = nfmpi_get_var1_text_all(ncid, varid, start(:,1), value)
   end function nf90mpi_get_varn_text_all



   function nf90mpi_put_varn_1D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           count, values(1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_text

   function nf90mpi_put_varn_2D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_text

   function nf90mpi_put_varn_3D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_text

   function nf90mpi_put_varn_4D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_text

   function nf90mpi_put_varn_5D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_text

   function nf90mpi_put_varn_6D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_text

   function nf90mpi_put_varn_7D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_text = nfmpi_put_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_text


   function nf90mpi_get_varn_1D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           count, values(1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_text

   function nf90mpi_get_varn_2D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_text

   function nf90mpi_get_varn_3D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_text

   function nf90mpi_get_varn_4D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_text

   function nf90mpi_get_varn_5D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_text

   function nf90mpi_get_varn_6D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_text

   function nf90mpi_get_varn_7D_text(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_text = nfmpi_get_varn_text(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_text


!
! Collective APIs
!

   function nf90mpi_put_varn_1D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_1D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_1D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_1D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_1D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_1D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_1D_text_all

   function nf90mpi_put_varn_2D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_2D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_2D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_2D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_2D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_2D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_2D_text_all

   function nf90mpi_put_varn_3D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_3D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_3D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_3D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_3D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_3D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_3D_text_all

   function nf90mpi_put_varn_4D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_4D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_4D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_4D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_4D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_4D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_4D_text_all

   function nf90mpi_put_varn_5D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_5D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_5D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_5D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_5D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_5D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_5D_text_all

   function nf90mpi_put_varn_6D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_6D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_6D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_6D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_6D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_6D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_6D_text_all

   function nf90mpi_put_varn_7D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:,:),            intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_put_varn_7D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_put_varn_7D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_put_varn_7D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_put_varn_7D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_put_varn_7D_text_all = nfmpi_put_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_put_varn_7D_text_all


   function nf90mpi_get_varn_1D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_1D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_1D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_1D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_1D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_1D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_1D_text_all

   function nf90mpi_get_varn_2D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_2D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_2D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_2D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_2D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_2D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_2D_text_all

   function nf90mpi_get_varn_3D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_3D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_3D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_3D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_3D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_3D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_3D_text_all

   function nf90mpi_get_varn_4D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_4D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_4D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_4D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_4D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_4D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_4D_text_all

   function nf90mpi_get_varn_5D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_5D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_5D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_5D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_5D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_5D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_5D_text_all

   function nf90mpi_get_varn_6D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_6D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_6D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_6D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_6D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_6D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_6D_text_all

   function nf90mpi_get_varn_7D_text_all(ncid, varid, values, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_get_varn_7D_text_all
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_get_varn_7D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           count, values(1,1,1,1,1,1,1))
     else
         ! Set local arguments to default values
         nf90mpi_get_varn_7D_text_all = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_get_varn_7D_text_all .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_get_varn_7D_text_all = nfmpi_get_varn_text_all(ncid, varid, num, start, &
                                                           localCount, values(1,1,1,1,1,1,1))
         deallocate(localCount)
     endif
   end function nf90mpi_get_varn_7D_text_all


!
! Nonblocking APIs
!


   ! iput a scalar of type integer (kind=OneByteInt)
   function nf90mpi_iput_varn_OneByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=OneByteInt),                                   intent(in) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iput_varn_OneByteInt

     nf90mpi_iput_varn_OneByteInt = nfmpi_iput_var1_int1(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iput_varn_OneByteInt

   ! iput a scalar of type integer (kind=TwoByteInt)
   function nf90mpi_iput_varn_TwoByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=TwoByteInt),                                   intent(INOUT) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iput_varn_TwoByteInt

     nf90mpi_iput_varn_TwoByteInt = nfmpi_iput_var1_int2(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iput_varn_TwoByteInt

   ! iput a scalar of type integer (kind=FourByteInt)
   function nf90mpi_iput_varn_FourByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=FourByteInt),                                   intent(INOUT) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iput_varn_FourByteInt

     nf90mpi_iput_varn_FourByteInt = nfmpi_iput_var1_int(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iput_varn_FourByteInt

   ! iput a scalar of type real (kind=FourByteReal)
   function nf90mpi_iput_varn_FourByteReal(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=FourByteReal),                                   intent(INOUT) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iput_varn_FourByteReal

     nf90mpi_iput_varn_FourByteReal = nfmpi_iput_var1_real(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iput_varn_FourByteReal

   ! iput a scalar of type real (kind=EightByteReal)
   function nf90mpi_iput_varn_EightByteReal(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=EightByteReal),                                   intent(INOUT) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iput_varn_EightByteReal

     nf90mpi_iput_varn_EightByteReal = nfmpi_iput_var1_double(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iput_varn_EightByteReal

   ! iput a scalar of type integer (kind=EightByteInt)
   function nf90mpi_iput_varn_EightByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=EightByteInt),                                   intent(INOUT) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iput_varn_EightByteInt

     nf90mpi_iput_varn_EightByteInt = nfmpi_iput_var1_int8(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iput_varn_EightByteInt


   ! iget a scalar of type integer (kind=OneByteInt)
   function nf90mpi_iget_varn_OneByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=OneByteInt),                                   intent(out) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iget_varn_OneByteInt

     nf90mpi_iget_varn_OneByteInt = nfmpi_iget_var1_int1(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iget_varn_OneByteInt

   ! iget a scalar of type integer (kind=TwoByteInt)
   function nf90mpi_iget_varn_TwoByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=TwoByteInt),                                   intent(out) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iget_varn_TwoByteInt

     nf90mpi_iget_varn_TwoByteInt = nfmpi_iget_var1_int2(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iget_varn_TwoByteInt

   ! iget a scalar of type integer (kind=FourByteInt)
   function nf90mpi_iget_varn_FourByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=FourByteInt),                                   intent(out) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iget_varn_FourByteInt

     nf90mpi_iget_varn_FourByteInt = nfmpi_iget_var1_int(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iget_varn_FourByteInt

   ! iget a scalar of type real (kind=FourByteReal)
   function nf90mpi_iget_varn_FourByteReal(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=FourByteReal),                                   intent(out) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iget_varn_FourByteReal

     nf90mpi_iget_varn_FourByteReal = nfmpi_iget_var1_real(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iget_varn_FourByteReal

   ! iget a scalar of type real (kind=EightByteReal)
   function nf90mpi_iget_varn_EightByteReal(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=EightByteReal),                                   intent(out) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iget_varn_EightByteReal

     nf90mpi_iget_varn_EightByteReal = nfmpi_iget_var1_double(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iget_varn_EightByteReal

   ! iget a scalar of type integer (kind=EightByteInt)
   function nf90mpi_iget_varn_EightByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=EightByteInt),                                   intent(out) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iget_varn_EightByteInt

     nf90mpi_iget_varn_EightByteInt = nfmpi_iget_var1_int8(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iget_varn_EightByteInt


   ! bput a scalar of type integer (kind=OneByteInt)
   function nf90mpi_bput_varn_OneByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=OneByteInt),                                   intent(in) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_bput_varn_OneByteInt

     nf90mpi_bput_varn_OneByteInt = nfmpi_bput_var1_int1(ncid, varid, start(:,1), value, req)
   end function nf90mpi_bput_varn_OneByteInt

   ! bput a scalar of type integer (kind=TwoByteInt)
   function nf90mpi_bput_varn_TwoByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=TwoByteInt),                                   intent(INOUT) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_bput_varn_TwoByteInt

     nf90mpi_bput_varn_TwoByteInt = nfmpi_bput_var1_int2(ncid, varid, start(:,1), value, req)
   end function nf90mpi_bput_varn_TwoByteInt

   ! bput a scalar of type integer (kind=FourByteInt)
   function nf90mpi_bput_varn_FourByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=FourByteInt),                                   intent(INOUT) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_bput_varn_FourByteInt

     nf90mpi_bput_varn_FourByteInt = nfmpi_bput_var1_int(ncid, varid, start(:,1), value, req)
   end function nf90mpi_bput_varn_FourByteInt

   ! bput a scalar of type real (kind=FourByteReal)
   function nf90mpi_bput_varn_FourByteReal(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=FourByteReal),                                   intent(INOUT) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_bput_varn_FourByteReal

     nf90mpi_bput_varn_FourByteReal = nfmpi_bput_var1_real(ncid, varid, start(:,1), value, req)
   end function nf90mpi_bput_varn_FourByteReal

   ! bput a scalar of type real (kind=EightByteReal)
   function nf90mpi_bput_varn_EightByteReal(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     real (kind=EightByteReal),                                   intent(INOUT) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_bput_varn_EightByteReal

     nf90mpi_bput_varn_EightByteReal = nfmpi_bput_var1_double(ncid, varid, start(:,1), value, req)
   end function nf90mpi_bput_varn_EightByteReal

   ! bput a scalar of type integer (kind=EightByteInt)
   function nf90mpi_bput_varn_EightByteInt(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     integer (kind=EightByteInt),                                   intent(INOUT) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_bput_varn_EightByteInt

     nf90mpi_bput_varn_EightByteInt = nfmpi_bput_var1_int8(ncid, varid, start(:,1), value, req)
   end function nf90mpi_bput_varn_EightByteInt



!
! put APIs
!

   function nf90mpi_iput_varn_1D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_1D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_1D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_1D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_1D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_1D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_1D_OneByteInt

   function nf90mpi_iput_varn_2D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_2D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_2D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_2D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_2D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_2D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_2D_OneByteInt

   function nf90mpi_iput_varn_3D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_3D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_3D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_3D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_3D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_3D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_3D_OneByteInt

   function nf90mpi_iput_varn_4D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_4D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_4D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_4D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_4D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_4D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_4D_OneByteInt

   function nf90mpi_iput_varn_5D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_5D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_5D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_5D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_5D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_5D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_5D_OneByteInt

   function nf90mpi_iput_varn_6D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_6D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_6D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_6D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_6D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_6D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_6D_OneByteInt

   function nf90mpi_iput_varn_7D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_7D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_7D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_7D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_7D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_7D_OneByteInt = nfmpi_iput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_7D_OneByteInt


   function nf90mpi_iput_varn_1D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_1D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_1D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_1D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_1D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_1D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_1D_TwoByteInt

   function nf90mpi_iput_varn_2D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_2D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_2D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_2D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_2D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_2D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_2D_TwoByteInt

   function nf90mpi_iput_varn_3D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_3D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_3D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_3D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_3D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_3D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_3D_TwoByteInt

   function nf90mpi_iput_varn_4D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_4D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_4D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_4D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_4D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_4D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_4D_TwoByteInt

   function nf90mpi_iput_varn_5D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_5D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_5D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_5D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_5D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_5D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_5D_TwoByteInt

   function nf90mpi_iput_varn_6D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_6D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_6D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_6D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_6D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_6D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_6D_TwoByteInt

   function nf90mpi_iput_varn_7D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_7D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_7D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_7D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_7D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_7D_TwoByteInt = nfmpi_iput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_7D_TwoByteInt


   function nf90mpi_iput_varn_1D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_1D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_1D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_1D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_1D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_1D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_1D_FourByteInt

   function nf90mpi_iput_varn_2D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_2D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_2D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_2D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_2D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_2D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_2D_FourByteInt

   function nf90mpi_iput_varn_3D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_3D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_3D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_3D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_3D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_3D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_3D_FourByteInt

   function nf90mpi_iput_varn_4D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_4D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_4D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_4D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_4D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_4D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_4D_FourByteInt

   function nf90mpi_iput_varn_5D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_5D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_5D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_5D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_5D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_5D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_5D_FourByteInt

   function nf90mpi_iput_varn_6D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_6D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_6D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_6D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_6D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_6D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_6D_FourByteInt

   function nf90mpi_iput_varn_7D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_7D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_7D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_7D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_7D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_7D_FourByteInt = nfmpi_iput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_7D_FourByteInt


   function nf90mpi_iput_varn_1D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_1D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_1D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_1D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_1D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_1D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_1D_FourByteReal

   function nf90mpi_iput_varn_2D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_2D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_2D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_2D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_2D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_2D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_2D_FourByteReal

   function nf90mpi_iput_varn_3D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_3D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_3D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_3D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_3D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_3D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_3D_FourByteReal

   function nf90mpi_iput_varn_4D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_4D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_4D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_4D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_4D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_4D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_4D_FourByteReal

   function nf90mpi_iput_varn_5D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_5D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_5D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_5D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_5D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_5D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_5D_FourByteReal

   function nf90mpi_iput_varn_6D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_6D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_6D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_6D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_6D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_6D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_6D_FourByteReal

   function nf90mpi_iput_varn_7D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_7D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_7D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_7D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_7D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_7D_FourByteReal = nfmpi_iput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_7D_FourByteReal


   function nf90mpi_iput_varn_1D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_1D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_1D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_1D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_1D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_1D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_1D_EightByteReal

   function nf90mpi_iput_varn_2D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_2D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_2D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_2D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_2D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_2D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_2D_EightByteReal

   function nf90mpi_iput_varn_3D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_3D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_3D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_3D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_3D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_3D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_3D_EightByteReal

   function nf90mpi_iput_varn_4D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_4D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_4D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_4D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_4D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_4D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_4D_EightByteReal

   function nf90mpi_iput_varn_5D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_5D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_5D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_5D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_5D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_5D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_5D_EightByteReal

   function nf90mpi_iput_varn_6D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_6D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_6D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_6D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_6D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_6D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_6D_EightByteReal

   function nf90mpi_iput_varn_7D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_7D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_7D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_7D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_7D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_7D_EightByteReal = nfmpi_iput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_7D_EightByteReal


   function nf90mpi_iput_varn_1D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_1D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_1D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_1D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_1D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_1D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_1D_EightByteInt

   function nf90mpi_iput_varn_2D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_2D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_2D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_2D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_2D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_2D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_2D_EightByteInt

   function nf90mpi_iput_varn_3D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_3D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_3D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_3D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_3D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_3D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_3D_EightByteInt

   function nf90mpi_iput_varn_4D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_4D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_4D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_4D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_4D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_4D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_4D_EightByteInt

   function nf90mpi_iput_varn_5D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_5D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_5D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_5D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_5D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_5D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_5D_EightByteInt

   function nf90mpi_iput_varn_6D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_6D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_6D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_6D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_6D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_6D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_6D_EightByteInt

   function nf90mpi_iput_varn_7D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_7D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_7D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_7D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_7D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_7D_EightByteInt = nfmpi_iput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_7D_EightByteInt


!
! get APIs
!

   function nf90mpi_iget_varn_1D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_1D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_1D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_1D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_1D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_1D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_1D_OneByteInt

   function nf90mpi_iget_varn_2D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_2D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_2D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_2D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_2D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_2D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_2D_OneByteInt

   function nf90mpi_iget_varn_3D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_3D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_3D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_3D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_3D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_3D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_3D_OneByteInt

   function nf90mpi_iget_varn_4D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_4D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_4D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_4D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_4D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_4D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_4D_OneByteInt

   function nf90mpi_iget_varn_5D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_5D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_5D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_5D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_5D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_5D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_5D_OneByteInt

   function nf90mpi_iget_varn_6D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_6D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_6D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_6D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_6D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_6D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_6D_OneByteInt

   function nf90mpi_iget_varn_7D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_7D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_7D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_7D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_7D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_7D_OneByteInt = nfmpi_iget_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_7D_OneByteInt


   function nf90mpi_iget_varn_1D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_1D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_1D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_1D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_1D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_1D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_1D_TwoByteInt

   function nf90mpi_iget_varn_2D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_2D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_2D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_2D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_2D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_2D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_2D_TwoByteInt

   function nf90mpi_iget_varn_3D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_3D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_3D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_3D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_3D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_3D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_3D_TwoByteInt

   function nf90mpi_iget_varn_4D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_4D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_4D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_4D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_4D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_4D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_4D_TwoByteInt

   function nf90mpi_iget_varn_5D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_5D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_5D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_5D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_5D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_5D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_5D_TwoByteInt

   function nf90mpi_iget_varn_6D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_6D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_6D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_6D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_6D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_6D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_6D_TwoByteInt

   function nf90mpi_iget_varn_7D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_7D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_7D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_7D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_7D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_7D_TwoByteInt = nfmpi_iget_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_7D_TwoByteInt


   function nf90mpi_iget_varn_1D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_1D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_1D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_1D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_1D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_1D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_1D_FourByteInt

   function nf90mpi_iget_varn_2D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_2D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_2D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_2D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_2D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_2D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_2D_FourByteInt

   function nf90mpi_iget_varn_3D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_3D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_3D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_3D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_3D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_3D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_3D_FourByteInt

   function nf90mpi_iget_varn_4D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_4D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_4D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_4D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_4D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_4D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_4D_FourByteInt

   function nf90mpi_iget_varn_5D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_5D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_5D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_5D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_5D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_5D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_5D_FourByteInt

   function nf90mpi_iget_varn_6D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_6D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_6D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_6D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_6D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_6D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_6D_FourByteInt

   function nf90mpi_iget_varn_7D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_7D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_7D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_7D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_7D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_7D_FourByteInt = nfmpi_iget_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_7D_FourByteInt


   function nf90mpi_iget_varn_1D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_1D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_1D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_1D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_1D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_1D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_1D_FourByteReal

   function nf90mpi_iget_varn_2D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_2D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_2D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_2D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_2D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_2D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_2D_FourByteReal

   function nf90mpi_iget_varn_3D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_3D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_3D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_3D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_3D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_3D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_3D_FourByteReal

   function nf90mpi_iget_varn_4D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_4D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_4D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_4D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_4D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_4D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_4D_FourByteReal

   function nf90mpi_iget_varn_5D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_5D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_5D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_5D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_5D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_5D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_5D_FourByteReal

   function nf90mpi_iget_varn_6D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_6D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_6D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_6D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_6D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_6D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_6D_FourByteReal

   function nf90mpi_iget_varn_7D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_7D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_7D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_7D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_7D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_7D_FourByteReal = nfmpi_iget_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_7D_FourByteReal


   function nf90mpi_iget_varn_1D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_1D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_1D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_1D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_1D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_1D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_1D_EightByteReal

   function nf90mpi_iget_varn_2D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_2D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_2D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_2D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_2D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_2D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_2D_EightByteReal

   function nf90mpi_iget_varn_3D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_3D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_3D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_3D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_3D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_3D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_3D_EightByteReal

   function nf90mpi_iget_varn_4D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_4D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_4D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_4D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_4D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_4D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_4D_EightByteReal

   function nf90mpi_iget_varn_5D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_5D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_5D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_5D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_5D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_5D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_5D_EightByteReal

   function nf90mpi_iget_varn_6D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_6D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_6D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_6D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_6D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_6D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_6D_EightByteReal

   function nf90mpi_iget_varn_7D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_7D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_7D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_7D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_7D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_7D_EightByteReal = nfmpi_iget_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_7D_EightByteReal


   function nf90mpi_iget_varn_1D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_1D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_1D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_1D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_1D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_1D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_1D_EightByteInt

   function nf90mpi_iget_varn_2D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_2D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_2D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_2D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_2D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_2D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_2D_EightByteInt

   function nf90mpi_iget_varn_3D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_3D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_3D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_3D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_3D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_3D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_3D_EightByteInt

   function nf90mpi_iget_varn_4D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_4D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_4D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_4D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_4D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_4D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_4D_EightByteInt

   function nf90mpi_iget_varn_5D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_5D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_5D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_5D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_5D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_5D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_5D_EightByteInt

   function nf90mpi_iget_varn_6D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_6D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_6D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_6D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_6D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_6D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_6D_EightByteInt

   function nf90mpi_iget_varn_7D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_7D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_7D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_7D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_7D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_7D_EightByteInt = nfmpi_iget_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_7D_EightByteInt


!
! bput APIs
!

   function nf90mpi_bput_varn_1D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_1D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_1D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_1D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_1D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_1D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_1D_OneByteInt

   function nf90mpi_bput_varn_2D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_2D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_2D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_2D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_2D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_2D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_2D_OneByteInt

   function nf90mpi_bput_varn_3D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_3D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_3D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_3D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_3D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_3D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_3D_OneByteInt

   function nf90mpi_bput_varn_4D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_4D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_4D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_4D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_4D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_4D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_4D_OneByteInt

   function nf90mpi_bput_varn_5D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_5D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_5D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_5D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_5D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_5D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_5D_OneByteInt

   function nf90mpi_bput_varn_6D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_6D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_6D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_6D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_6D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_6D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_6D_OneByteInt

   function nf90mpi_bput_varn_7D_OneByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=OneByteInt),                   dimension(:,:,:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_7D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_7D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_7D_OneByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_7D_OneByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_7D_OneByteInt = nfmpi_bput_varn_int1(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_7D_OneByteInt


   function nf90mpi_bput_varn_1D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_1D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_1D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_1D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_1D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_1D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_1D_TwoByteInt

   function nf90mpi_bput_varn_2D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_2D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_2D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_2D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_2D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_2D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_2D_TwoByteInt

   function nf90mpi_bput_varn_3D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_3D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_3D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_3D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_3D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_3D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_3D_TwoByteInt

   function nf90mpi_bput_varn_4D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_4D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_4D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_4D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_4D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_4D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_4D_TwoByteInt

   function nf90mpi_bput_varn_5D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_5D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_5D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_5D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_5D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_5D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_5D_TwoByteInt

   function nf90mpi_bput_varn_6D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_6D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_6D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_6D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_6D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_6D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_6D_TwoByteInt

   function nf90mpi_bput_varn_7D_TwoByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=TwoByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_7D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_7D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_7D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_7D_TwoByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_7D_TwoByteInt = nfmpi_bput_varn_int2(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_7D_TwoByteInt


   function nf90mpi_bput_varn_1D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_1D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_1D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_1D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_1D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_1D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_1D_FourByteInt

   function nf90mpi_bput_varn_2D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_2D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_2D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_2D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_2D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_2D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_2D_FourByteInt

   function nf90mpi_bput_varn_3D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_3D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_3D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_3D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_3D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_3D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_3D_FourByteInt

   function nf90mpi_bput_varn_4D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_4D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_4D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_4D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_4D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_4D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_4D_FourByteInt

   function nf90mpi_bput_varn_5D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_5D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_5D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_5D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_5D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_5D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_5D_FourByteInt

   function nf90mpi_bput_varn_6D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_6D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_6D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_6D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_6D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_6D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_6D_FourByteInt

   function nf90mpi_bput_varn_7D_FourByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=FourByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_7D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_7D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_7D_FourByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_7D_FourByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_7D_FourByteInt = nfmpi_bput_varn_int(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_7D_FourByteInt


   function nf90mpi_bput_varn_1D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_1D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_1D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_1D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_1D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_1D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_1D_FourByteReal

   function nf90mpi_bput_varn_2D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_2D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_2D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_2D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_2D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_2D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_2D_FourByteReal

   function nf90mpi_bput_varn_3D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_3D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_3D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_3D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_3D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_3D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_3D_FourByteReal

   function nf90mpi_bput_varn_4D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_4D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_4D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_4D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_4D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_4D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_4D_FourByteReal

   function nf90mpi_bput_varn_5D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_5D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_5D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_5D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_5D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_5D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_5D_FourByteReal

   function nf90mpi_bput_varn_6D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_6D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_6D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_6D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_6D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_6D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_6D_FourByteReal

   function nf90mpi_bput_varn_7D_FourByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=FourByteReal),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_7D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_7D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_7D_FourByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_7D_FourByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_7D_FourByteReal = nfmpi_bput_varn_real(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_7D_FourByteReal


   function nf90mpi_bput_varn_1D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_1D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_1D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_1D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_1D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_1D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_1D_EightByteReal

   function nf90mpi_bput_varn_2D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_2D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_2D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_2D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_2D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_2D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_2D_EightByteReal

   function nf90mpi_bput_varn_3D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_3D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_3D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_3D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_3D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_3D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_3D_EightByteReal

   function nf90mpi_bput_varn_4D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_4D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_4D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_4D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_4D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_4D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_4D_EightByteReal

   function nf90mpi_bput_varn_5D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_5D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_5D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_5D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_5D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_5D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_5D_EightByteReal

   function nf90mpi_bput_varn_6D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_6D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_6D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_6D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_6D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_6D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_6D_EightByteReal

   function nf90mpi_bput_varn_7D_EightByteReal(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     real (kind=EightByteReal),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_7D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_7D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_7D_EightByteReal = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_7D_EightByteReal .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_7D_EightByteReal = nfmpi_bput_varn_double(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_7D_EightByteReal


   function nf90mpi_bput_varn_1D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_1D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_1D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_1D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_1D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_1D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_1D_EightByteInt

   function nf90mpi_bput_varn_2D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_2D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_2D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_2D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_2D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_2D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_2D_EightByteInt

   function nf90mpi_bput_varn_3D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_3D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_3D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_3D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_3D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_3D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_3D_EightByteInt

   function nf90mpi_bput_varn_4D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_4D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_4D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_4D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_4D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_4D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_4D_EightByteInt

   function nf90mpi_bput_varn_5D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_5D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_5D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_5D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_5D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_5D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_5D_EightByteInt

   function nf90mpi_bput_varn_6D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_6D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_6D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_6D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_6D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_6D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_6D_EightByteInt

   function nf90mpi_bput_varn_7D_EightByteInt(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     integer (kind=EightByteInt),                   dimension(:,:,:,:,:,:,:),            intent(INOUT) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_7D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_7D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   count, values, req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_7D_EightByteInt = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_7D_EightByteInt .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_7D_EightByteInt = nfmpi_bput_varn_int8(ncid, varid, num, start, &
                                                   localCount, values, req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_7D_EightByteInt


!
! text variable
!


   ! iput a scalar of type character (len = *)
   function nf90mpi_iput_varn_text(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     character (len = *),                            intent(in) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iput_varn_text

     nf90mpi_iput_varn_text = nfmpi_iput_var1_text(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iput_varn_text

   ! iget a scalar of type character (len = *)
   function nf90mpi_iget_varn_text(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     character (len = *),                            intent(out) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_iget_varn_text

     nf90mpi_iget_varn_text = nfmpi_iget_var1_text(ncid, varid, start(:,1), value, req)
   end function nf90mpi_iget_varn_text

   ! bput a scalar of type character (len = *)
   function nf90mpi_bput_varn_text(ncid, varid, value, req, start)
     integer,                                        intent(in) :: ncid, varid
     character (len = *),                            intent(in) :: value
     integer,                                        intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), intent(in) :: start
     integer                                                    :: nf90mpi_bput_varn_text

     nf90mpi_bput_varn_text = nfmpi_bput_var1_text(ncid, varid, start(:,1), value, req)
   end function nf90mpi_bput_varn_text



   function nf90mpi_iput_varn_1D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_1D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_1D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       count, values(1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_1D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_1D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_1D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_1D_text

   function nf90mpi_iput_varn_2D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_2D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_2D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_2D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_2D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_2D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_2D_text

   function nf90mpi_iput_varn_3D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_3D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_3D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_3D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_3D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_3D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_3D_text

   function nf90mpi_iput_varn_4D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_4D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_4D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_4D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_4D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_4D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_4D_text

   function nf90mpi_iput_varn_5D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_5D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_5D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_5D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_5D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_5D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_5D_text

   function nf90mpi_iput_varn_6D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_6D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_6D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_6D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_6D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_6D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_6D_text

   function nf90mpi_iput_varn_7D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iput_varn_7D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iput_varn_7D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iput_varn_7D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iput_varn_7D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iput_varn_7D_text = nfmpi_iput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iput_varn_7D_text


   function nf90mpi_iget_varn_1D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_1D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_1D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       count, values(1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_1D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_1D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_1D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_1D_text

   function nf90mpi_iget_varn_2D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_2D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_2D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_2D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_2D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_2D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_2D_text

   function nf90mpi_iget_varn_3D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_3D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_3D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_3D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_3D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_3D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_3D_text

   function nf90mpi_iget_varn_4D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_4D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_4D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_4D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_4D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_4D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_4D_text

   function nf90mpi_iget_varn_5D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_5D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_5D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_5D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_5D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_5D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_5D_text

   function nf90mpi_iget_varn_6D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_6D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_6D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_6D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_6D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_6D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_6D_text

   function nf90mpi_iget_varn_7D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:,:),            intent(out) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_iget_varn_7D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_iget_varn_7D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_iget_varn_7D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_iget_varn_7D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_iget_varn_7D_text = nfmpi_iget_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_iget_varn_7D_text


   function nf90mpi_bput_varn_1D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_1D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_1D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       count, values(1), req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_1D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_1D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_1D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_1D_text

   function nf90mpi_bput_varn_2D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_2D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_2D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_2D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_2D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_2D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_2D_text

   function nf90mpi_bput_varn_3D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_3D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_3D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_3D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_3D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_3D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_3D_text

   function nf90mpi_bput_varn_4D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_4D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_4D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_4D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_4D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_4D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_4D_text

   function nf90mpi_bput_varn_5D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_5D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_5D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_5D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_5D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_5D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_5D_text

   function nf90mpi_bput_varn_6D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_6D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_6D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_6D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_6D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_6D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_6D_text

   function nf90mpi_bput_varn_7D_text(ncid, varid, values, req, num, start, count)
     integer,                                                  intent(in) :: ncid, varid, num
     character (len=*),              dimension(:,:,:,:,:,:,:),            intent(in) :: values
     integer,                                                  intent(out):: req
     integer (kind=MPI_OFFSET_KIND), dimension(:,:),           intent(in) :: start
     integer (kind=MPI_OFFSET_KIND), dimension(:,:), optional, intent(in) :: count
     integer                                                              :: nf90mpi_bput_varn_7D_text
     integer (kind=MPI_OFFSET_KIND), allocatable                          :: localCount(:,:)
     integer                                                              :: ndims

     if (present(count)) then
         nf90mpi_bput_varn_7D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       count, values(1,1,1,1,1,1,1), req)
     else
         ! Set local arguments to default values
         nf90mpi_bput_varn_7D_text = nfmpi_inq_varndims(ncid, varid, ndims)
         if (nf90mpi_bput_varn_7D_text .NE. NF_NOERR) return
         allocate(localCount(ndims, num))
         localCount(:,:) = 1
         nf90mpi_bput_varn_7D_text = nfmpi_bput_varn_text(ncid, varid, num, start, &
                                                       localCount, values(1,1,1,1,1,1,1), req)
         deallocate(localCount)
     endif
   end function nf90mpi_bput_varn_7D_text


