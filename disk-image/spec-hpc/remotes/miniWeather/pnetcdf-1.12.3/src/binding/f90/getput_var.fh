! Do not edit this file. It is produced from the corresponding .m4 source
!
!  Copyright (C) 2013, Northwestern University and Argonne National Laboratory
!  See COPYRIGHT notice in top-level directory.
!
! $Id$
!


   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_OneByteInt(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt),                                     intent(in)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_OneByteInt = &
         nfmpi_put_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_OneByteInt = &
         nfmpi_put_var1_int1(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_OneByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_TwoByteInt(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt),                                     intent(INOUT)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_TwoByteInt = &
         nfmpi_put_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_TwoByteInt = &
         nfmpi_put_var1_int2(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_TwoByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_FourByteInt(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt),                                     intent(INOUT)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_FourByteInt = &
         nfmpi_put_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_FourByteInt = &
         nfmpi_put_var1_int(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_FourByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_FourByteReal(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal),                                     intent(INOUT)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_FourByteReal = &
         nfmpi_put_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_FourByteReal = &
         nfmpi_put_var1_real(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_FourByteReal

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_EightByteReal(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal),                                     intent(INOUT)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_EightByteReal = &
         nfmpi_put_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_EightByteReal = &
         nfmpi_put_var1_double(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_EightByteReal

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_EightByteInt(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt),                                     intent(INOUT)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_EightByteInt = &
         nfmpi_put_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_EightByteInt = &
         nfmpi_put_var1_int8(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_EightByteInt


   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_OneByteInt_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt),                                     intent(in)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_OneByteInt_all = &
         nfmpi_put_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_OneByteInt_all = &
         nfmpi_put_var1_int1_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_OneByteInt_all

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_TwoByteInt_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt),                                     intent(INOUT)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_TwoByteInt_all = &
         nfmpi_put_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_TwoByteInt_all = &
         nfmpi_put_var1_int2_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_TwoByteInt_all

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_FourByteInt_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt),                                     intent(INOUT)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_FourByteInt_all = &
         nfmpi_put_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_FourByteInt_all = &
         nfmpi_put_var1_int_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_FourByteInt_all

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_FourByteReal_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal),                                     intent(INOUT)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_FourByteReal_all = &
         nfmpi_put_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_FourByteReal_all = &
         nfmpi_put_var1_real_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_FourByteReal_all

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_EightByteReal_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal),                                     intent(INOUT)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_EightByteReal_all = &
         nfmpi_put_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_EightByteReal_all = &
         nfmpi_put_var1_double_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_EightByteReal_all

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_put_var_EightByteInt_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt),                                     intent(INOUT)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_put_var_EightByteInt_all = &
         nfmpi_put_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_put_var_EightByteInt_all = &
         nfmpi_put_var1_int8_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_put_var_EightByteInt_all


   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_OneByteInt(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_OneByteInt = &
         nfmpi_get_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_OneByteInt = &
         nfmpi_get_var1_int1(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_OneByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_TwoByteInt(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_TwoByteInt = &
         nfmpi_get_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_TwoByteInt = &
         nfmpi_get_var1_int2(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_TwoByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_FourByteInt(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_FourByteInt = &
         nfmpi_get_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_FourByteInt = &
         nfmpi_get_var1_int(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_FourByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_FourByteReal(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_FourByteReal = &
         nfmpi_get_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_FourByteReal = &
         nfmpi_get_var1_real(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_FourByteReal

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_EightByteReal(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_EightByteReal = &
         nfmpi_get_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_EightByteReal = &
         nfmpi_get_var1_double(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_EightByteReal

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_EightByteInt(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_EightByteInt = &
         nfmpi_get_var1(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_EightByteInt = &
         nfmpi_get_var1_int8(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_EightByteInt


   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_OneByteInt_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_OneByteInt_all = &
         nfmpi_get_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_OneByteInt_all = &
         nfmpi_get_var1_int1_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_OneByteInt_all

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_TwoByteInt_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_TwoByteInt_all = &
         nfmpi_get_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_TwoByteInt_all = &
         nfmpi_get_var1_int2_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_TwoByteInt_all

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_FourByteInt_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_FourByteInt_all = &
         nfmpi_get_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_FourByteInt_all = &
         nfmpi_get_var1_int_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_FourByteInt_all

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_FourByteReal_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_FourByteReal_all = &
         nfmpi_get_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_FourByteReal_all = &
         nfmpi_get_var1_real_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_FourByteReal_all

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_EightByteReal_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_EightByteReal_all = &
         nfmpi_get_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_EightByteReal_all = &
         nfmpi_get_var1_double_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_EightByteReal_all

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_get_var_EightByteInt_all(ncid, varid, buf, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt),                                     intent(out)  :: buf
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_get_var_EightByteInt_all = &
         nfmpi_get_var1_all(ncid, varid, localStart, buf, bufcount, buftype)
     else
         nf90mpi_get_var_EightByteInt_all = &
         nfmpi_get_var1_int8_all(ncid, varid, localStart, buf)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_get_var_EightByteInt_all



!
! Nonblocking iput APIs
!

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iput_var_OneByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt),                                     intent(in)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iput_var_OneByteInt = &
         nfmpi_iput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iput_var_OneByteInt = &
         nfmpi_iput_var1_int1(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iput_var_OneByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iput_var_TwoByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt),                                     intent(INOUT)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iput_var_TwoByteInt = &
         nfmpi_iput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iput_var_TwoByteInt = &
         nfmpi_iput_var1_int2(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iput_var_TwoByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iput_var_FourByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt),                                     intent(INOUT)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iput_var_FourByteInt = &
         nfmpi_iput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iput_var_FourByteInt = &
         nfmpi_iput_var1_int(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iput_var_FourByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iput_var_FourByteReal(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal),                                     intent(INOUT)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iput_var_FourByteReal = &
         nfmpi_iput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iput_var_FourByteReal = &
         nfmpi_iput_var1_real(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iput_var_FourByteReal

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iput_var_EightByteReal(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal),                                     intent(INOUT)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iput_var_EightByteReal = &
         nfmpi_iput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iput_var_EightByteReal = &
         nfmpi_iput_var1_double(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iput_var_EightByteReal

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iput_var_EightByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt),                                     intent(INOUT)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iput_var_EightByteInt = &
         nfmpi_iput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iput_var_EightByteInt = &
         nfmpi_iput_var1_int8(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iput_var_EightByteInt


!
! Nonblocking iget APIs
!

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iget_var_OneByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt),                                     intent(out)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iget_var_OneByteInt = &
         nfmpi_iget_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iget_var_OneByteInt = &
         nfmpi_iget_var1_int1(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iget_var_OneByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iget_var_TwoByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt),                                     intent(out)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iget_var_TwoByteInt = &
         nfmpi_iget_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iget_var_TwoByteInt = &
         nfmpi_iget_var1_int2(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iget_var_TwoByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iget_var_FourByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt),                                     intent(out)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iget_var_FourByteInt = &
         nfmpi_iget_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iget_var_FourByteInt = &
         nfmpi_iget_var1_int(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iget_var_FourByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iget_var_FourByteReal(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal),                                     intent(out)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iget_var_FourByteReal = &
         nfmpi_iget_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iget_var_FourByteReal = &
         nfmpi_iget_var1_real(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iget_var_FourByteReal

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iget_var_EightByteReal(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal),                                     intent(out)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iget_var_EightByteReal = &
         nfmpi_iget_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iget_var_EightByteReal = &
         nfmpi_iget_var1_double(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iget_var_EightByteReal

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_iget_var_EightByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt),                                     intent(out)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_iget_var_EightByteInt = &
         nfmpi_iget_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_iget_var_EightByteInt = &
         nfmpi_iget_var1_int8(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_iget_var_EightByteInt


!
! Nonblocking bput APIs
!

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_bput_var_OneByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt),                                     intent(in)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_bput_var_OneByteInt = &
         nfmpi_bput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_bput_var_OneByteInt = &
         nfmpi_bput_var1_int1(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_bput_var_OneByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_bput_var_TwoByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt),                                     intent(INOUT)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_bput_var_TwoByteInt = &
         nfmpi_bput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_bput_var_TwoByteInt = &
         nfmpi_bput_var1_int2(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_bput_var_TwoByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_bput_var_FourByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt),                                     intent(INOUT)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_bput_var_FourByteInt = &
         nfmpi_bput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_bput_var_FourByteInt = &
         nfmpi_bput_var1_int(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_bput_var_FourByteInt

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_bput_var_FourByteReal(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal),                                     intent(INOUT)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_bput_var_FourByteReal = &
         nfmpi_bput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_bput_var_FourByteReal = &
         nfmpi_bput_var1_real(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_bput_var_FourByteReal

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_bput_var_EightByteReal(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal),                                     intent(INOUT)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_bput_var_EightByteReal = &
         nfmpi_bput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_bput_var_EightByteReal = &
         nfmpi_bput_var1_double(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_bput_var_EightByteReal

   ! This is the case when the I/O buffer is a scalar
   function nf90mpi_bput_var_EightByteInt(ncid, varid, buf, req, start, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt),                                     intent(INOUT)  :: buf
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif

     if (present(buftype)) then
         nf90mpi_bput_var_EightByteInt = &
         nfmpi_bput_var1(ncid, varid, localStart, buf, bufcount, buftype, req)
     else
         nf90mpi_bput_var_EightByteInt = &
         nfmpi_bput_var1_int8(ncid, varid, localStart, buf, req)
     endif

     if (.NOT. present(start)) deallocate(localStart)
   end function nf90mpi_bput_var_EightByteInt



!
! Independent put APIs
!

   function nf90mpi_put_var_1D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_OneByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_OneByteInt = &
             nfmpi_put_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_OneByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_OneByteInt = &
             nfmpi_put_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_OneByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_OneByteInt = &
             nfmpi_put_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_OneByteInt

   function nf90mpi_put_var_2D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_OneByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_OneByteInt = &
             nfmpi_put_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_OneByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_OneByteInt = &
             nfmpi_put_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_OneByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_OneByteInt = &
             nfmpi_put_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_OneByteInt

   function nf90mpi_put_var_3D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_OneByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_OneByteInt = &
             nfmpi_put_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_OneByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_OneByteInt = &
             nfmpi_put_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_OneByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_OneByteInt = &
             nfmpi_put_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_OneByteInt

   function nf90mpi_put_var_4D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_OneByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_OneByteInt = &
             nfmpi_put_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_OneByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_OneByteInt = &
             nfmpi_put_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_OneByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_OneByteInt = &
             nfmpi_put_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_OneByteInt

   function nf90mpi_put_var_5D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_OneByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_OneByteInt = &
             nfmpi_put_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_OneByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_OneByteInt = &
             nfmpi_put_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_OneByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_OneByteInt = &
             nfmpi_put_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_OneByteInt

   function nf90mpi_put_var_6D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_OneByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_OneByteInt = &
             nfmpi_put_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_OneByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_OneByteInt = &
             nfmpi_put_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_OneByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_OneByteInt = &
             nfmpi_put_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_OneByteInt

   function nf90mpi_put_var_7D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_OneByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_OneByteInt = &
             nfmpi_put_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_OneByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_OneByteInt = &
             nfmpi_put_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_OneByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_OneByteInt = &
             nfmpi_put_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_OneByteInt


   function nf90mpi_put_var_1D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_TwoByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_TwoByteInt = &
             nfmpi_put_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_TwoByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_TwoByteInt = &
             nfmpi_put_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_TwoByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_TwoByteInt = &
             nfmpi_put_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_TwoByteInt

   function nf90mpi_put_var_2D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_TwoByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_TwoByteInt = &
             nfmpi_put_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_TwoByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_TwoByteInt = &
             nfmpi_put_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_TwoByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_TwoByteInt = &
             nfmpi_put_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_TwoByteInt

   function nf90mpi_put_var_3D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_TwoByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_TwoByteInt = &
             nfmpi_put_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_TwoByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_TwoByteInt = &
             nfmpi_put_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_TwoByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_TwoByteInt = &
             nfmpi_put_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_TwoByteInt

   function nf90mpi_put_var_4D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_TwoByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_TwoByteInt = &
             nfmpi_put_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_TwoByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_TwoByteInt = &
             nfmpi_put_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_TwoByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_TwoByteInt = &
             nfmpi_put_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_TwoByteInt

   function nf90mpi_put_var_5D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_TwoByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_TwoByteInt = &
             nfmpi_put_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_TwoByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_TwoByteInt = &
             nfmpi_put_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_TwoByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_TwoByteInt = &
             nfmpi_put_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_TwoByteInt

   function nf90mpi_put_var_6D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_TwoByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_TwoByteInt = &
             nfmpi_put_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_TwoByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_TwoByteInt = &
             nfmpi_put_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_TwoByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_TwoByteInt = &
             nfmpi_put_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_TwoByteInt

   function nf90mpi_put_var_7D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_TwoByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_TwoByteInt = &
             nfmpi_put_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_TwoByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_TwoByteInt = &
             nfmpi_put_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_TwoByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_TwoByteInt = &
             nfmpi_put_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_TwoByteInt


   function nf90mpi_put_var_1D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteInt = &
             nfmpi_put_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteInt = &
             nfmpi_put_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteInt = &
             nfmpi_put_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_FourByteInt

   function nf90mpi_put_var_2D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteInt = &
             nfmpi_put_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteInt = &
             nfmpi_put_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteInt = &
             nfmpi_put_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_FourByteInt

   function nf90mpi_put_var_3D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteInt = &
             nfmpi_put_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteInt = &
             nfmpi_put_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteInt = &
             nfmpi_put_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_FourByteInt

   function nf90mpi_put_var_4D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteInt = &
             nfmpi_put_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteInt = &
             nfmpi_put_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteInt = &
             nfmpi_put_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_FourByteInt

   function nf90mpi_put_var_5D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteInt = &
             nfmpi_put_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteInt = &
             nfmpi_put_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteInt = &
             nfmpi_put_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_FourByteInt

   function nf90mpi_put_var_6D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteInt = &
             nfmpi_put_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteInt = &
             nfmpi_put_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteInt = &
             nfmpi_put_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_FourByteInt

   function nf90mpi_put_var_7D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteInt = &
             nfmpi_put_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteInt = &
             nfmpi_put_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteInt = &
             nfmpi_put_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_FourByteInt


   function nf90mpi_put_var_1D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteReal = &
             nfmpi_put_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteReal = &
             nfmpi_put_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteReal = &
             nfmpi_put_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_FourByteReal

   function nf90mpi_put_var_2D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteReal = &
             nfmpi_put_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteReal = &
             nfmpi_put_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteReal = &
             nfmpi_put_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_FourByteReal

   function nf90mpi_put_var_3D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteReal = &
             nfmpi_put_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteReal = &
             nfmpi_put_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteReal = &
             nfmpi_put_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_FourByteReal

   function nf90mpi_put_var_4D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteReal = &
             nfmpi_put_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteReal = &
             nfmpi_put_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteReal = &
             nfmpi_put_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_FourByteReal

   function nf90mpi_put_var_5D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteReal = &
             nfmpi_put_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteReal = &
             nfmpi_put_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteReal = &
             nfmpi_put_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_FourByteReal

   function nf90mpi_put_var_6D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteReal = &
             nfmpi_put_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteReal = &
             nfmpi_put_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteReal = &
             nfmpi_put_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_FourByteReal

   function nf90mpi_put_var_7D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteReal = &
             nfmpi_put_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteReal = &
             nfmpi_put_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteReal = &
             nfmpi_put_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_FourByteReal


   function nf90mpi_put_var_1D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteReal = &
             nfmpi_put_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteReal = &
             nfmpi_put_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteReal = &
             nfmpi_put_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_EightByteReal

   function nf90mpi_put_var_2D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteReal = &
             nfmpi_put_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteReal = &
             nfmpi_put_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteReal = &
             nfmpi_put_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_EightByteReal

   function nf90mpi_put_var_3D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteReal = &
             nfmpi_put_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteReal = &
             nfmpi_put_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteReal = &
             nfmpi_put_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_EightByteReal

   function nf90mpi_put_var_4D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteReal = &
             nfmpi_put_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteReal = &
             nfmpi_put_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteReal = &
             nfmpi_put_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_EightByteReal

   function nf90mpi_put_var_5D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteReal = &
             nfmpi_put_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteReal = &
             nfmpi_put_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteReal = &
             nfmpi_put_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_EightByteReal

   function nf90mpi_put_var_6D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteReal = &
             nfmpi_put_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteReal = &
             nfmpi_put_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteReal = &
             nfmpi_put_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_EightByteReal

   function nf90mpi_put_var_7D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteReal = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteReal = &
             nfmpi_put_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteReal = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteReal = &
             nfmpi_put_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteReal = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteReal = &
             nfmpi_put_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_EightByteReal


   function nf90mpi_put_var_1D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteInt = &
             nfmpi_put_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteInt = &
             nfmpi_put_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteInt = &
             nfmpi_put_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_EightByteInt

   function nf90mpi_put_var_2D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteInt = &
             nfmpi_put_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteInt = &
             nfmpi_put_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteInt = &
             nfmpi_put_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_EightByteInt

   function nf90mpi_put_var_3D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteInt = &
             nfmpi_put_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteInt = &
             nfmpi_put_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteInt = &
             nfmpi_put_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_EightByteInt

   function nf90mpi_put_var_4D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteInt = &
             nfmpi_put_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteInt = &
             nfmpi_put_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteInt = &
             nfmpi_put_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_EightByteInt

   function nf90mpi_put_var_5D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteInt = &
             nfmpi_put_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteInt = &
             nfmpi_put_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteInt = &
             nfmpi_put_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_EightByteInt

   function nf90mpi_put_var_6D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteInt = &
             nfmpi_put_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteInt = &
             nfmpi_put_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteInt = &
             nfmpi_put_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_EightByteInt

   function nf90mpi_put_var_7D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteInt = &
             nfmpi_put_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteInt = &
             nfmpi_put_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteInt = &
             nfmpi_put_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteInt = &
             nfmpi_put_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteInt = &
             nfmpi_put_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteInt = &
             nfmpi_put_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_EightByteInt


!
! Independent get APIs
!

   function nf90mpi_get_var_1D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_OneByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_OneByteInt = &
             nfmpi_get_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_OneByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_OneByteInt = &
             nfmpi_get_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_OneByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_OneByteInt = &
             nfmpi_get_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_OneByteInt

   function nf90mpi_get_var_2D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_OneByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_OneByteInt = &
             nfmpi_get_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_OneByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_OneByteInt = &
             nfmpi_get_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_OneByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_OneByteInt = &
             nfmpi_get_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_OneByteInt

   function nf90mpi_get_var_3D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_OneByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_OneByteInt = &
             nfmpi_get_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_OneByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_OneByteInt = &
             nfmpi_get_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_OneByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_OneByteInt = &
             nfmpi_get_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_OneByteInt

   function nf90mpi_get_var_4D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_OneByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_OneByteInt = &
             nfmpi_get_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_OneByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_OneByteInt = &
             nfmpi_get_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_OneByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_OneByteInt = &
             nfmpi_get_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_OneByteInt

   function nf90mpi_get_var_5D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_OneByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_OneByteInt = &
             nfmpi_get_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_OneByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_OneByteInt = &
             nfmpi_get_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_OneByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_OneByteInt = &
             nfmpi_get_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_OneByteInt

   function nf90mpi_get_var_6D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_OneByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_OneByteInt = &
             nfmpi_get_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_OneByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_OneByteInt = &
             nfmpi_get_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_OneByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_OneByteInt = &
             nfmpi_get_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_OneByteInt

   function nf90mpi_get_var_7D_OneByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_OneByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_OneByteInt = &
             nfmpi_get_varm_int1(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_OneByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_OneByteInt = &
             nfmpi_get_vars_int1(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_OneByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_OneByteInt = &
             nfmpi_get_vara_int1(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_OneByteInt


   function nf90mpi_get_var_1D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_TwoByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_TwoByteInt = &
             nfmpi_get_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_TwoByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_TwoByteInt = &
             nfmpi_get_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_TwoByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_TwoByteInt = &
             nfmpi_get_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_TwoByteInt

   function nf90mpi_get_var_2D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_TwoByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_TwoByteInt = &
             nfmpi_get_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_TwoByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_TwoByteInt = &
             nfmpi_get_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_TwoByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_TwoByteInt = &
             nfmpi_get_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_TwoByteInt

   function nf90mpi_get_var_3D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_TwoByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_TwoByteInt = &
             nfmpi_get_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_TwoByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_TwoByteInt = &
             nfmpi_get_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_TwoByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_TwoByteInt = &
             nfmpi_get_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_TwoByteInt

   function nf90mpi_get_var_4D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_TwoByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_TwoByteInt = &
             nfmpi_get_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_TwoByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_TwoByteInt = &
             nfmpi_get_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_TwoByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_TwoByteInt = &
             nfmpi_get_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_TwoByteInt

   function nf90mpi_get_var_5D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_TwoByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_TwoByteInt = &
             nfmpi_get_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_TwoByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_TwoByteInt = &
             nfmpi_get_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_TwoByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_TwoByteInt = &
             nfmpi_get_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_TwoByteInt

   function nf90mpi_get_var_6D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_TwoByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_TwoByteInt = &
             nfmpi_get_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_TwoByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_TwoByteInt = &
             nfmpi_get_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_TwoByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_TwoByteInt = &
             nfmpi_get_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_TwoByteInt

   function nf90mpi_get_var_7D_TwoByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_TwoByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_TwoByteInt = &
             nfmpi_get_varm_int2(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_TwoByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_TwoByteInt = &
             nfmpi_get_vars_int2(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_TwoByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_TwoByteInt = &
             nfmpi_get_vara_int2(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_TwoByteInt


   function nf90mpi_get_var_1D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteInt = &
             nfmpi_get_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteInt = &
             nfmpi_get_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteInt = &
             nfmpi_get_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_FourByteInt

   function nf90mpi_get_var_2D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteInt = &
             nfmpi_get_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteInt = &
             nfmpi_get_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteInt = &
             nfmpi_get_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_FourByteInt

   function nf90mpi_get_var_3D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteInt = &
             nfmpi_get_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteInt = &
             nfmpi_get_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteInt = &
             nfmpi_get_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_FourByteInt

   function nf90mpi_get_var_4D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteInt = &
             nfmpi_get_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteInt = &
             nfmpi_get_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteInt = &
             nfmpi_get_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_FourByteInt

   function nf90mpi_get_var_5D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteInt = &
             nfmpi_get_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteInt = &
             nfmpi_get_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteInt = &
             nfmpi_get_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_FourByteInt

   function nf90mpi_get_var_6D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteInt = &
             nfmpi_get_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteInt = &
             nfmpi_get_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteInt = &
             nfmpi_get_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_FourByteInt

   function nf90mpi_get_var_7D_FourByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteInt = &
             nfmpi_get_varm_int(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteInt = &
             nfmpi_get_vars_int(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteInt = &
             nfmpi_get_vara_int(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_FourByteInt


   function nf90mpi_get_var_1D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteReal = &
             nfmpi_get_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteReal = &
             nfmpi_get_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteReal = &
             nfmpi_get_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_FourByteReal

   function nf90mpi_get_var_2D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteReal = &
             nfmpi_get_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteReal = &
             nfmpi_get_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteReal = &
             nfmpi_get_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_FourByteReal

   function nf90mpi_get_var_3D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteReal = &
             nfmpi_get_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteReal = &
             nfmpi_get_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteReal = &
             nfmpi_get_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_FourByteReal

   function nf90mpi_get_var_4D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteReal = &
             nfmpi_get_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteReal = &
             nfmpi_get_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteReal = &
             nfmpi_get_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_FourByteReal

   function nf90mpi_get_var_5D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteReal = &
             nfmpi_get_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteReal = &
             nfmpi_get_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteReal = &
             nfmpi_get_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_FourByteReal

   function nf90mpi_get_var_6D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteReal = &
             nfmpi_get_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteReal = &
             nfmpi_get_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteReal = &
             nfmpi_get_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_FourByteReal

   function nf90mpi_get_var_7D_FourByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteReal = &
             nfmpi_get_varm_real(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteReal = &
             nfmpi_get_vars_real(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteReal = &
             nfmpi_get_vara_real(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_FourByteReal


   function nf90mpi_get_var_1D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteReal = &
             nfmpi_get_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteReal = &
             nfmpi_get_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteReal = &
             nfmpi_get_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_EightByteReal

   function nf90mpi_get_var_2D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteReal = &
             nfmpi_get_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteReal = &
             nfmpi_get_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteReal = &
             nfmpi_get_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_EightByteReal

   function nf90mpi_get_var_3D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteReal = &
             nfmpi_get_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteReal = &
             nfmpi_get_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteReal = &
             nfmpi_get_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_EightByteReal

   function nf90mpi_get_var_4D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteReal = &
             nfmpi_get_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteReal = &
             nfmpi_get_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteReal = &
             nfmpi_get_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_EightByteReal

   function nf90mpi_get_var_5D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteReal = &
             nfmpi_get_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteReal = &
             nfmpi_get_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteReal = &
             nfmpi_get_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_EightByteReal

   function nf90mpi_get_var_6D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteReal = &
             nfmpi_get_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteReal = &
             nfmpi_get_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteReal = &
             nfmpi_get_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_EightByteReal

   function nf90mpi_get_var_7D_EightByteReal(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteReal = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteReal = &
             nfmpi_get_varm_double(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteReal = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteReal = &
             nfmpi_get_vars_double(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteReal = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteReal = &
             nfmpi_get_vara_double(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_EightByteReal


   function nf90mpi_get_var_1D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteInt = &
             nfmpi_get_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteInt = &
             nfmpi_get_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteInt = &
             nfmpi_get_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_EightByteInt

   function nf90mpi_get_var_2D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteInt = &
             nfmpi_get_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteInt = &
             nfmpi_get_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteInt = &
             nfmpi_get_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_EightByteInt

   function nf90mpi_get_var_3D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteInt = &
             nfmpi_get_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteInt = &
             nfmpi_get_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteInt = &
             nfmpi_get_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_EightByteInt

   function nf90mpi_get_var_4D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteInt = &
             nfmpi_get_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteInt = &
             nfmpi_get_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteInt = &
             nfmpi_get_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_EightByteInt

   function nf90mpi_get_var_5D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteInt = &
             nfmpi_get_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteInt = &
             nfmpi_get_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteInt = &
             nfmpi_get_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_EightByteInt

   function nf90mpi_get_var_6D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteInt = &
             nfmpi_get_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteInt = &
             nfmpi_get_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteInt = &
             nfmpi_get_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_EightByteInt

   function nf90mpi_get_var_7D_EightByteInt(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteInt = &
             nfmpi_get_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteInt = &
             nfmpi_get_varm_int8(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteInt = &
             nfmpi_get_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteInt = &
             nfmpi_get_vars_int8(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteInt = &
             nfmpi_get_vara(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteInt = &
             nfmpi_get_vara_int8(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_EightByteInt


!
! collective put APIs
!

   function nf90mpi_put_var_1D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_OneByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_OneByteInt_all = &
             nfmpi_put_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_OneByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_OneByteInt_all = &
             nfmpi_put_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_OneByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_OneByteInt_all = &
             nfmpi_put_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_OneByteInt_all

   function nf90mpi_put_var_2D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_OneByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_OneByteInt_all = &
             nfmpi_put_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_OneByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_OneByteInt_all = &
             nfmpi_put_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_OneByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_OneByteInt_all = &
             nfmpi_put_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_OneByteInt_all

   function nf90mpi_put_var_3D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_OneByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_OneByteInt_all = &
             nfmpi_put_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_OneByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_OneByteInt_all = &
             nfmpi_put_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_OneByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_OneByteInt_all = &
             nfmpi_put_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_OneByteInt_all

   function nf90mpi_put_var_4D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_OneByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_OneByteInt_all = &
             nfmpi_put_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_OneByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_OneByteInt_all = &
             nfmpi_put_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_OneByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_OneByteInt_all = &
             nfmpi_put_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_OneByteInt_all

   function nf90mpi_put_var_5D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_OneByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_OneByteInt_all = &
             nfmpi_put_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_OneByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_OneByteInt_all = &
             nfmpi_put_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_OneByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_OneByteInt_all = &
             nfmpi_put_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_OneByteInt_all

   function nf90mpi_put_var_6D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_OneByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_OneByteInt_all = &
             nfmpi_put_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_OneByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_OneByteInt_all = &
             nfmpi_put_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_OneByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_OneByteInt_all = &
             nfmpi_put_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_OneByteInt_all

   function nf90mpi_put_var_7D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:,:),                      intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_OneByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_OneByteInt_all = &
             nfmpi_put_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_OneByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_OneByteInt_all = &
             nfmpi_put_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_OneByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_OneByteInt_all = &
             nfmpi_put_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_OneByteInt_all


   function nf90mpi_put_var_1D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_TwoByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_TwoByteInt_all = &
             nfmpi_put_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_TwoByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_TwoByteInt_all = &
             nfmpi_put_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_TwoByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_TwoByteInt_all = &
             nfmpi_put_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_TwoByteInt_all

   function nf90mpi_put_var_2D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_TwoByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_TwoByteInt_all = &
             nfmpi_put_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_TwoByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_TwoByteInt_all = &
             nfmpi_put_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_TwoByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_TwoByteInt_all = &
             nfmpi_put_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_TwoByteInt_all

   function nf90mpi_put_var_3D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_TwoByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_TwoByteInt_all = &
             nfmpi_put_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_TwoByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_TwoByteInt_all = &
             nfmpi_put_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_TwoByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_TwoByteInt_all = &
             nfmpi_put_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_TwoByteInt_all

   function nf90mpi_put_var_4D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_TwoByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_TwoByteInt_all = &
             nfmpi_put_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_TwoByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_TwoByteInt_all = &
             nfmpi_put_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_TwoByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_TwoByteInt_all = &
             nfmpi_put_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_TwoByteInt_all

   function nf90mpi_put_var_5D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_TwoByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_TwoByteInt_all = &
             nfmpi_put_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_TwoByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_TwoByteInt_all = &
             nfmpi_put_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_TwoByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_TwoByteInt_all = &
             nfmpi_put_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_TwoByteInt_all

   function nf90mpi_put_var_6D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_TwoByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_TwoByteInt_all = &
             nfmpi_put_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_TwoByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_TwoByteInt_all = &
             nfmpi_put_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_TwoByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_TwoByteInt_all = &
             nfmpi_put_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_TwoByteInt_all

   function nf90mpi_put_var_7D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_TwoByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_TwoByteInt_all = &
             nfmpi_put_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_TwoByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_TwoByteInt_all = &
             nfmpi_put_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_TwoByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_TwoByteInt_all = &
             nfmpi_put_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_TwoByteInt_all


   function nf90mpi_put_var_1D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteInt_all = &
             nfmpi_put_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteInt_all = &
             nfmpi_put_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteInt_all = &
             nfmpi_put_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_FourByteInt_all

   function nf90mpi_put_var_2D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteInt_all = &
             nfmpi_put_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteInt_all = &
             nfmpi_put_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteInt_all = &
             nfmpi_put_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_FourByteInt_all

   function nf90mpi_put_var_3D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteInt_all = &
             nfmpi_put_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteInt_all = &
             nfmpi_put_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteInt_all = &
             nfmpi_put_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_FourByteInt_all

   function nf90mpi_put_var_4D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteInt_all = &
             nfmpi_put_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteInt_all = &
             nfmpi_put_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteInt_all = &
             nfmpi_put_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_FourByteInt_all

   function nf90mpi_put_var_5D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteInt_all = &
             nfmpi_put_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteInt_all = &
             nfmpi_put_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteInt_all = &
             nfmpi_put_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_FourByteInt_all

   function nf90mpi_put_var_6D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteInt_all = &
             nfmpi_put_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteInt_all = &
             nfmpi_put_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteInt_all = &
             nfmpi_put_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_FourByteInt_all

   function nf90mpi_put_var_7D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteInt_all = &
             nfmpi_put_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteInt_all = &
             nfmpi_put_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteInt_all = &
             nfmpi_put_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_FourByteInt_all


   function nf90mpi_put_var_1D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteReal_all = &
             nfmpi_put_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteReal_all = &
             nfmpi_put_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_FourByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_FourByteReal_all = &
             nfmpi_put_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_FourByteReal_all

   function nf90mpi_put_var_2D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteReal_all = &
             nfmpi_put_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteReal_all = &
             nfmpi_put_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_FourByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_FourByteReal_all = &
             nfmpi_put_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_FourByteReal_all

   function nf90mpi_put_var_3D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteReal_all = &
             nfmpi_put_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteReal_all = &
             nfmpi_put_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_FourByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_FourByteReal_all = &
             nfmpi_put_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_FourByteReal_all

   function nf90mpi_put_var_4D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteReal_all = &
             nfmpi_put_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteReal_all = &
             nfmpi_put_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_FourByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_FourByteReal_all = &
             nfmpi_put_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_FourByteReal_all

   function nf90mpi_put_var_5D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteReal_all = &
             nfmpi_put_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteReal_all = &
             nfmpi_put_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_FourByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_FourByteReal_all = &
             nfmpi_put_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_FourByteReal_all

   function nf90mpi_put_var_6D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteReal_all = &
             nfmpi_put_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteReal_all = &
             nfmpi_put_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_FourByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_FourByteReal_all = &
             nfmpi_put_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_FourByteReal_all

   function nf90mpi_put_var_7D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteReal_all = &
             nfmpi_put_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteReal_all = &
             nfmpi_put_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_FourByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_FourByteReal_all = &
             nfmpi_put_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_FourByteReal_all


   function nf90mpi_put_var_1D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteReal_all = &
             nfmpi_put_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteReal_all = &
             nfmpi_put_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteReal_all = &
             nfmpi_put_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_EightByteReal_all

   function nf90mpi_put_var_2D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteReal_all = &
             nfmpi_put_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteReal_all = &
             nfmpi_put_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteReal_all = &
             nfmpi_put_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_EightByteReal_all

   function nf90mpi_put_var_3D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteReal_all = &
             nfmpi_put_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteReal_all = &
             nfmpi_put_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteReal_all = &
             nfmpi_put_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_EightByteReal_all

   function nf90mpi_put_var_4D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteReal_all = &
             nfmpi_put_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteReal_all = &
             nfmpi_put_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteReal_all = &
             nfmpi_put_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_EightByteReal_all

   function nf90mpi_put_var_5D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteReal_all = &
             nfmpi_put_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteReal_all = &
             nfmpi_put_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteReal_all = &
             nfmpi_put_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_EightByteReal_all

   function nf90mpi_put_var_6D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteReal_all = &
             nfmpi_put_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteReal_all = &
             nfmpi_put_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteReal_all = &
             nfmpi_put_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_EightByteReal_all

   function nf90mpi_put_var_7D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteReal_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteReal_all = &
             nfmpi_put_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteReal_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteReal_all = &
             nfmpi_put_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteReal_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteReal_all = &
             nfmpi_put_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_EightByteReal_all


   function nf90mpi_put_var_1D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_1D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteInt_all = &
             nfmpi_put_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteInt_all = &
             nfmpi_put_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_1D_EightByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_1D_EightByteInt_all = &
             nfmpi_put_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_EightByteInt_all

   function nf90mpi_put_var_2D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_2D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteInt_all = &
             nfmpi_put_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteInt_all = &
             nfmpi_put_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_2D_EightByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_2D_EightByteInt_all = &
             nfmpi_put_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_EightByteInt_all

   function nf90mpi_put_var_3D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_3D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteInt_all = &
             nfmpi_put_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteInt_all = &
             nfmpi_put_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_3D_EightByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_3D_EightByteInt_all = &
             nfmpi_put_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_EightByteInt_all

   function nf90mpi_put_var_4D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_4D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteInt_all = &
             nfmpi_put_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteInt_all = &
             nfmpi_put_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_4D_EightByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_4D_EightByteInt_all = &
             nfmpi_put_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_EightByteInt_all

   function nf90mpi_put_var_5D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_5D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteInt_all = &
             nfmpi_put_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteInt_all = &
             nfmpi_put_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_5D_EightByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_5D_EightByteInt_all = &
             nfmpi_put_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_EightByteInt_all

   function nf90mpi_put_var_6D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_6D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteInt_all = &
             nfmpi_put_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteInt_all = &
             nfmpi_put_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_6D_EightByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_6D_EightByteInt_all = &
             nfmpi_put_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_EightByteInt_all

   function nf90mpi_put_var_7D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_put_var_7D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteInt_all = &
             nfmpi_put_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteInt_all = &
             nfmpi_put_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteInt_all = &
             nfmpi_put_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteInt_all = &
             nfmpi_put_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_put_var_7D_EightByteInt_all = &
             nfmpi_put_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_put_var_7D_EightByteInt_all = &
             nfmpi_put_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_EightByteInt_all

!
! collective get APIs
!

   function nf90mpi_get_var_1D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_OneByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_OneByteInt_all = &
             nfmpi_get_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_OneByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_OneByteInt_all = &
             nfmpi_get_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_OneByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_OneByteInt_all = &
             nfmpi_get_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_OneByteInt_all

   function nf90mpi_get_var_2D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_OneByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_OneByteInt_all = &
             nfmpi_get_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_OneByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_OneByteInt_all = &
             nfmpi_get_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_OneByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_OneByteInt_all = &
             nfmpi_get_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_OneByteInt_all

   function nf90mpi_get_var_3D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_OneByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_OneByteInt_all = &
             nfmpi_get_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_OneByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_OneByteInt_all = &
             nfmpi_get_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_OneByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_OneByteInt_all = &
             nfmpi_get_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_OneByteInt_all

   function nf90mpi_get_var_4D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_OneByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_OneByteInt_all = &
             nfmpi_get_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_OneByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_OneByteInt_all = &
             nfmpi_get_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_OneByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_OneByteInt_all = &
             nfmpi_get_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_OneByteInt_all

   function nf90mpi_get_var_5D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_OneByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_OneByteInt_all = &
             nfmpi_get_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_OneByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_OneByteInt_all = &
             nfmpi_get_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_OneByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_OneByteInt_all = &
             nfmpi_get_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_OneByteInt_all

   function nf90mpi_get_var_6D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_OneByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_OneByteInt_all = &
             nfmpi_get_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_OneByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_OneByteInt_all = &
             nfmpi_get_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_OneByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_OneByteInt_all = &
             nfmpi_get_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_OneByteInt_all

   function nf90mpi_get_var_7D_OneByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_OneByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_OneByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_OneByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_OneByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_OneByteInt_all = &
             nfmpi_get_varm_int1_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_OneByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_OneByteInt_all = &
             nfmpi_get_vars_int1_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_OneByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_OneByteInt_all = &
             nfmpi_get_vara_int1_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_OneByteInt_all


   function nf90mpi_get_var_1D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_TwoByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_TwoByteInt_all = &
             nfmpi_get_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_TwoByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_TwoByteInt_all = &
             nfmpi_get_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_TwoByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_TwoByteInt_all = &
             nfmpi_get_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_TwoByteInt_all

   function nf90mpi_get_var_2D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_TwoByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_TwoByteInt_all = &
             nfmpi_get_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_TwoByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_TwoByteInt_all = &
             nfmpi_get_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_TwoByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_TwoByteInt_all = &
             nfmpi_get_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_TwoByteInt_all

   function nf90mpi_get_var_3D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_TwoByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_TwoByteInt_all = &
             nfmpi_get_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_TwoByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_TwoByteInt_all = &
             nfmpi_get_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_TwoByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_TwoByteInt_all = &
             nfmpi_get_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_TwoByteInt_all

   function nf90mpi_get_var_4D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_TwoByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_TwoByteInt_all = &
             nfmpi_get_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_TwoByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_TwoByteInt_all = &
             nfmpi_get_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_TwoByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_TwoByteInt_all = &
             nfmpi_get_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_TwoByteInt_all

   function nf90mpi_get_var_5D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_TwoByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_TwoByteInt_all = &
             nfmpi_get_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_TwoByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_TwoByteInt_all = &
             nfmpi_get_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_TwoByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_TwoByteInt_all = &
             nfmpi_get_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_TwoByteInt_all

   function nf90mpi_get_var_6D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_TwoByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_TwoByteInt_all = &
             nfmpi_get_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_TwoByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_TwoByteInt_all = &
             nfmpi_get_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_TwoByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_TwoByteInt_all = &
             nfmpi_get_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_TwoByteInt_all

   function nf90mpi_get_var_7D_TwoByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_TwoByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_TwoByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_TwoByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_TwoByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_TwoByteInt_all = &
             nfmpi_get_varm_int2_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_TwoByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_TwoByteInt_all = &
             nfmpi_get_vars_int2_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_TwoByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_TwoByteInt_all = &
             nfmpi_get_vara_int2_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_TwoByteInt_all


   function nf90mpi_get_var_1D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteInt_all = &
             nfmpi_get_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteInt_all = &
             nfmpi_get_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteInt_all = &
             nfmpi_get_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_FourByteInt_all

   function nf90mpi_get_var_2D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteInt_all = &
             nfmpi_get_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteInt_all = &
             nfmpi_get_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteInt_all = &
             nfmpi_get_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_FourByteInt_all

   function nf90mpi_get_var_3D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteInt_all = &
             nfmpi_get_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteInt_all = &
             nfmpi_get_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteInt_all = &
             nfmpi_get_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_FourByteInt_all

   function nf90mpi_get_var_4D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteInt_all = &
             nfmpi_get_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteInt_all = &
             nfmpi_get_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteInt_all = &
             nfmpi_get_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_FourByteInt_all

   function nf90mpi_get_var_5D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteInt_all = &
             nfmpi_get_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteInt_all = &
             nfmpi_get_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteInt_all = &
             nfmpi_get_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_FourByteInt_all

   function nf90mpi_get_var_6D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteInt_all = &
             nfmpi_get_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteInt_all = &
             nfmpi_get_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteInt_all = &
             nfmpi_get_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_FourByteInt_all

   function nf90mpi_get_var_7D_FourByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_FourByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_FourByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_FourByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteInt_all = &
             nfmpi_get_varm_int_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteInt_all = &
             nfmpi_get_vars_int_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteInt_all = &
             nfmpi_get_vara_int_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_FourByteInt_all


   function nf90mpi_get_var_1D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteReal_all = &
             nfmpi_get_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteReal_all = &
             nfmpi_get_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_FourByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_FourByteReal_all = &
             nfmpi_get_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_FourByteReal_all

   function nf90mpi_get_var_2D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteReal_all = &
             nfmpi_get_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteReal_all = &
             nfmpi_get_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_FourByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_FourByteReal_all = &
             nfmpi_get_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_FourByteReal_all

   function nf90mpi_get_var_3D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteReal_all = &
             nfmpi_get_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteReal_all = &
             nfmpi_get_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_FourByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_FourByteReal_all = &
             nfmpi_get_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_FourByteReal_all

   function nf90mpi_get_var_4D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteReal_all = &
             nfmpi_get_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteReal_all = &
             nfmpi_get_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_FourByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_FourByteReal_all = &
             nfmpi_get_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_FourByteReal_all

   function nf90mpi_get_var_5D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteReal_all = &
             nfmpi_get_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteReal_all = &
             nfmpi_get_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_FourByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_FourByteReal_all = &
             nfmpi_get_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_FourByteReal_all

   function nf90mpi_get_var_6D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteReal_all = &
             nfmpi_get_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteReal_all = &
             nfmpi_get_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_FourByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_FourByteReal_all = &
             nfmpi_get_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_FourByteReal_all

   function nf90mpi_get_var_7D_FourByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_FourByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_FourByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_FourByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteReal_all = &
             nfmpi_get_varm_real_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteReal_all = &
             nfmpi_get_vars_real_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_FourByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_FourByteReal_all = &
             nfmpi_get_vara_real_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_FourByteReal_all


   function nf90mpi_get_var_1D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteReal_all = &
             nfmpi_get_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteReal_all = &
             nfmpi_get_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteReal_all = &
             nfmpi_get_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_EightByteReal_all

   function nf90mpi_get_var_2D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteReal_all = &
             nfmpi_get_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteReal_all = &
             nfmpi_get_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteReal_all = &
             nfmpi_get_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_EightByteReal_all

   function nf90mpi_get_var_3D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteReal_all = &
             nfmpi_get_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteReal_all = &
             nfmpi_get_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteReal_all = &
             nfmpi_get_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_EightByteReal_all

   function nf90mpi_get_var_4D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteReal_all = &
             nfmpi_get_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteReal_all = &
             nfmpi_get_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteReal_all = &
             nfmpi_get_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_EightByteReal_all

   function nf90mpi_get_var_5D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteReal_all = &
             nfmpi_get_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteReal_all = &
             nfmpi_get_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteReal_all = &
             nfmpi_get_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_EightByteReal_all

   function nf90mpi_get_var_6D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteReal_all = &
             nfmpi_get_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteReal_all = &
             nfmpi_get_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteReal_all = &
             nfmpi_get_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_EightByteReal_all

   function nf90mpi_get_var_7D_EightByteReal_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_EightByteReal_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_EightByteReal_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_EightByteReal_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteReal_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteReal_all = &
             nfmpi_get_varm_double_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteReal_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteReal_all = &
             nfmpi_get_vars_double_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteReal_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteReal_all = &
             nfmpi_get_vara_double_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_EightByteReal_all


   function nf90mpi_get_var_1D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_1D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteInt_all = &
             nfmpi_get_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteInt_all = &
             nfmpi_get_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_1D_EightByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_1D_EightByteInt_all = &
             nfmpi_get_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_EightByteInt_all

   function nf90mpi_get_var_2D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_2D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteInt_all = &
             nfmpi_get_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteInt_all = &
             nfmpi_get_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_2D_EightByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_2D_EightByteInt_all = &
             nfmpi_get_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_EightByteInt_all

   function nf90mpi_get_var_3D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_3D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteInt_all = &
             nfmpi_get_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteInt_all = &
             nfmpi_get_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_3D_EightByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_3D_EightByteInt_all = &
             nfmpi_get_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_EightByteInt_all

   function nf90mpi_get_var_4D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_4D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteInt_all = &
             nfmpi_get_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteInt_all = &
             nfmpi_get_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_4D_EightByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_4D_EightByteInt_all = &
             nfmpi_get_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_EightByteInt_all

   function nf90mpi_get_var_5D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_5D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteInt_all = &
             nfmpi_get_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteInt_all = &
             nfmpi_get_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_5D_EightByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_5D_EightByteInt_all = &
             nfmpi_get_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_EightByteInt_all

   function nf90mpi_get_var_6D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_6D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteInt_all = &
             nfmpi_get_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteInt_all = &
             nfmpi_get_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_6D_EightByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_6D_EightByteInt_all = &
             nfmpi_get_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_EightByteInt_all

   function nf90mpi_get_var_7D_EightByteInt_all(ncid, varid, values, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_get_var_7D_EightByteInt_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_EightByteInt_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_EightByteInt_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteInt_all = &
             nfmpi_get_varm_all(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteInt_all = &
             nfmpi_get_varm_int8_all(ncid, varid, localStart, localCount, localStride, map, values)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteInt_all = &
             nfmpi_get_vars_all(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteInt_all = &
             nfmpi_get_vars_int8_all(ncid, varid, localStart, localCount, localStride, values)
         endif
     else
         if (present(buftype)) then
             nf90mpi_get_var_7D_EightByteInt_all = &
             nfmpi_get_vara_all(ncid, varid, localStart, localCount, values, bufcount, buftype)
         else
             nf90mpi_get_var_7D_EightByteInt_all = &
             nfmpi_get_vara_int8_all(ncid, varid, localStart, localCount, values)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_EightByteInt_all


!
! Nonblocking APIs
!


!
! iput APIs
!

   function nf90mpi_iput_var_1D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_1D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_1D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_1D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_OneByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_OneByteInt = &
             nfmpi_iput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_OneByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_OneByteInt = &
             nfmpi_iput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_1D_OneByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_OneByteInt = &
             nfmpi_iput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_1D_OneByteInt

   function nf90mpi_iput_var_2D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_2D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_2D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_2D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_OneByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_OneByteInt = &
             nfmpi_iput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_OneByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_OneByteInt = &
             nfmpi_iput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_2D_OneByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_OneByteInt = &
             nfmpi_iput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_2D_OneByteInt

   function nf90mpi_iput_var_3D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_3D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_3D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_3D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_OneByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_OneByteInt = &
             nfmpi_iput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_OneByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_OneByteInt = &
             nfmpi_iput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_3D_OneByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_OneByteInt = &
             nfmpi_iput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_3D_OneByteInt

   function nf90mpi_iput_var_4D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_4D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_4D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_4D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_OneByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_OneByteInt = &
             nfmpi_iput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_OneByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_OneByteInt = &
             nfmpi_iput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_4D_OneByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_OneByteInt = &
             nfmpi_iput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_4D_OneByteInt

   function nf90mpi_iput_var_5D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_5D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_5D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_5D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_OneByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_OneByteInt = &
             nfmpi_iput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_OneByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_OneByteInt = &
             nfmpi_iput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_5D_OneByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_OneByteInt = &
             nfmpi_iput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_5D_OneByteInt

   function nf90mpi_iput_var_6D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_6D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_6D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_6D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_OneByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_OneByteInt = &
             nfmpi_iput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_OneByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_OneByteInt = &
             nfmpi_iput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_6D_OneByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_OneByteInt = &
             nfmpi_iput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_6D_OneByteInt

   function nf90mpi_iput_var_7D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_7D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_7D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_7D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_OneByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_OneByteInt = &
             nfmpi_iput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_OneByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_OneByteInt = &
             nfmpi_iput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_7D_OneByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_OneByteInt = &
             nfmpi_iput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_7D_OneByteInt


   function nf90mpi_iput_var_1D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_1D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_1D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_1D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_TwoByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_TwoByteInt = &
             nfmpi_iput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_TwoByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_TwoByteInt = &
             nfmpi_iput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_1D_TwoByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_TwoByteInt = &
             nfmpi_iput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_1D_TwoByteInt

   function nf90mpi_iput_var_2D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_2D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_2D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_2D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_TwoByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_TwoByteInt = &
             nfmpi_iput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_TwoByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_TwoByteInt = &
             nfmpi_iput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_2D_TwoByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_TwoByteInt = &
             nfmpi_iput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_2D_TwoByteInt

   function nf90mpi_iput_var_3D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_3D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_3D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_3D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_TwoByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_TwoByteInt = &
             nfmpi_iput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_TwoByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_TwoByteInt = &
             nfmpi_iput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_3D_TwoByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_TwoByteInt = &
             nfmpi_iput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_3D_TwoByteInt

   function nf90mpi_iput_var_4D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_4D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_4D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_4D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_TwoByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_TwoByteInt = &
             nfmpi_iput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_TwoByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_TwoByteInt = &
             nfmpi_iput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_4D_TwoByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_TwoByteInt = &
             nfmpi_iput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_4D_TwoByteInt

   function nf90mpi_iput_var_5D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_5D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_5D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_5D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_TwoByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_TwoByteInt = &
             nfmpi_iput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_TwoByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_TwoByteInt = &
             nfmpi_iput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_5D_TwoByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_TwoByteInt = &
             nfmpi_iput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_5D_TwoByteInt

   function nf90mpi_iput_var_6D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_6D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_6D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_6D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_TwoByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_TwoByteInt = &
             nfmpi_iput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_TwoByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_TwoByteInt = &
             nfmpi_iput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_6D_TwoByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_TwoByteInt = &
             nfmpi_iput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_6D_TwoByteInt

   function nf90mpi_iput_var_7D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_7D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_7D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_7D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_TwoByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_TwoByteInt = &
             nfmpi_iput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_TwoByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_TwoByteInt = &
             nfmpi_iput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_7D_TwoByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_TwoByteInt = &
             nfmpi_iput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_7D_TwoByteInt


   function nf90mpi_iput_var_1D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_1D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_1D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_1D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_FourByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_FourByteInt = &
             nfmpi_iput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_FourByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_FourByteInt = &
             nfmpi_iput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_1D_FourByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_FourByteInt = &
             nfmpi_iput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_1D_FourByteInt

   function nf90mpi_iput_var_2D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_2D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_2D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_2D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_FourByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_FourByteInt = &
             nfmpi_iput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_FourByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_FourByteInt = &
             nfmpi_iput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_2D_FourByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_FourByteInt = &
             nfmpi_iput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_2D_FourByteInt

   function nf90mpi_iput_var_3D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_3D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_3D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_3D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_FourByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_FourByteInt = &
             nfmpi_iput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_FourByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_FourByteInt = &
             nfmpi_iput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_3D_FourByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_FourByteInt = &
             nfmpi_iput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_3D_FourByteInt

   function nf90mpi_iput_var_4D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_4D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_4D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_4D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_FourByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_FourByteInt = &
             nfmpi_iput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_FourByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_FourByteInt = &
             nfmpi_iput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_4D_FourByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_FourByteInt = &
             nfmpi_iput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_4D_FourByteInt

   function nf90mpi_iput_var_5D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_5D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_5D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_5D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_FourByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_FourByteInt = &
             nfmpi_iput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_FourByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_FourByteInt = &
             nfmpi_iput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_5D_FourByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_FourByteInt = &
             nfmpi_iput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_5D_FourByteInt

   function nf90mpi_iput_var_6D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_6D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_6D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_6D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_FourByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_FourByteInt = &
             nfmpi_iput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_FourByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_FourByteInt = &
             nfmpi_iput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_6D_FourByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_FourByteInt = &
             nfmpi_iput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_6D_FourByteInt

   function nf90mpi_iput_var_7D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_7D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_7D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_7D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_FourByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_FourByteInt = &
             nfmpi_iput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_FourByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_FourByteInt = &
             nfmpi_iput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_7D_FourByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_FourByteInt = &
             nfmpi_iput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_7D_FourByteInt


   function nf90mpi_iput_var_1D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_1D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_1D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_1D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_FourByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_FourByteReal = &
             nfmpi_iput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_FourByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_FourByteReal = &
             nfmpi_iput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_1D_FourByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_FourByteReal = &
             nfmpi_iput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_1D_FourByteReal

   function nf90mpi_iput_var_2D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_2D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_2D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_2D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_FourByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_FourByteReal = &
             nfmpi_iput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_FourByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_FourByteReal = &
             nfmpi_iput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_2D_FourByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_FourByteReal = &
             nfmpi_iput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_2D_FourByteReal

   function nf90mpi_iput_var_3D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_3D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_3D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_3D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_FourByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_FourByteReal = &
             nfmpi_iput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_FourByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_FourByteReal = &
             nfmpi_iput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_3D_FourByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_FourByteReal = &
             nfmpi_iput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_3D_FourByteReal

   function nf90mpi_iput_var_4D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_4D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_4D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_4D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_FourByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_FourByteReal = &
             nfmpi_iput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_FourByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_FourByteReal = &
             nfmpi_iput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_4D_FourByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_FourByteReal = &
             nfmpi_iput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_4D_FourByteReal

   function nf90mpi_iput_var_5D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_5D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_5D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_5D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_FourByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_FourByteReal = &
             nfmpi_iput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_FourByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_FourByteReal = &
             nfmpi_iput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_5D_FourByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_FourByteReal = &
             nfmpi_iput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_5D_FourByteReal

   function nf90mpi_iput_var_6D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_6D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_6D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_6D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_FourByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_FourByteReal = &
             nfmpi_iput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_FourByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_FourByteReal = &
             nfmpi_iput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_6D_FourByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_FourByteReal = &
             nfmpi_iput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_6D_FourByteReal

   function nf90mpi_iput_var_7D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_7D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_7D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_7D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_FourByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_FourByteReal = &
             nfmpi_iput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_FourByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_FourByteReal = &
             nfmpi_iput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_7D_FourByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_FourByteReal = &
             nfmpi_iput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_7D_FourByteReal


   function nf90mpi_iput_var_1D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_1D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_1D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_1D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_EightByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_EightByteReal = &
             nfmpi_iput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_EightByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_EightByteReal = &
             nfmpi_iput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_1D_EightByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_EightByteReal = &
             nfmpi_iput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_1D_EightByteReal

   function nf90mpi_iput_var_2D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_2D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_2D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_2D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_EightByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_EightByteReal = &
             nfmpi_iput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_EightByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_EightByteReal = &
             nfmpi_iput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_2D_EightByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_EightByteReal = &
             nfmpi_iput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_2D_EightByteReal

   function nf90mpi_iput_var_3D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_3D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_3D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_3D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_EightByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_EightByteReal = &
             nfmpi_iput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_EightByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_EightByteReal = &
             nfmpi_iput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_3D_EightByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_EightByteReal = &
             nfmpi_iput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_3D_EightByteReal

   function nf90mpi_iput_var_4D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_4D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_4D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_4D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_EightByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_EightByteReal = &
             nfmpi_iput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_EightByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_EightByteReal = &
             nfmpi_iput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_4D_EightByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_EightByteReal = &
             nfmpi_iput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_4D_EightByteReal

   function nf90mpi_iput_var_5D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_5D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_5D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_5D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_EightByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_EightByteReal = &
             nfmpi_iput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_EightByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_EightByteReal = &
             nfmpi_iput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_5D_EightByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_EightByteReal = &
             nfmpi_iput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_5D_EightByteReal

   function nf90mpi_iput_var_6D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_6D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_6D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_6D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_EightByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_EightByteReal = &
             nfmpi_iput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_EightByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_EightByteReal = &
             nfmpi_iput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_6D_EightByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_EightByteReal = &
             nfmpi_iput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_6D_EightByteReal

   function nf90mpi_iput_var_7D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_7D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_7D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_7D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_EightByteReal = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_EightByteReal = &
             nfmpi_iput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_EightByteReal = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_EightByteReal = &
             nfmpi_iput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_7D_EightByteReal = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_EightByteReal = &
             nfmpi_iput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_7D_EightByteReal


   function nf90mpi_iput_var_1D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_1D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_1D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_1D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_EightByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_EightByteInt = &
             nfmpi_iput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_1D_EightByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_EightByteInt = &
             nfmpi_iput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_1D_EightByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_1D_EightByteInt = &
             nfmpi_iput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_1D_EightByteInt

   function nf90mpi_iput_var_2D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_2D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_2D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_2D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_EightByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_EightByteInt = &
             nfmpi_iput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_2D_EightByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_EightByteInt = &
             nfmpi_iput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_2D_EightByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_2D_EightByteInt = &
             nfmpi_iput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_2D_EightByteInt

   function nf90mpi_iput_var_3D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_3D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_3D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_3D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_EightByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_EightByteInt = &
             nfmpi_iput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_3D_EightByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_EightByteInt = &
             nfmpi_iput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_3D_EightByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_3D_EightByteInt = &
             nfmpi_iput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_3D_EightByteInt

   function nf90mpi_iput_var_4D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_4D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_4D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_4D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_EightByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_EightByteInt = &
             nfmpi_iput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_4D_EightByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_EightByteInt = &
             nfmpi_iput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_4D_EightByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_4D_EightByteInt = &
             nfmpi_iput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_4D_EightByteInt

   function nf90mpi_iput_var_5D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_5D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_5D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_5D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_EightByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_EightByteInt = &
             nfmpi_iput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_5D_EightByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_EightByteInt = &
             nfmpi_iput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_5D_EightByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_5D_EightByteInt = &
             nfmpi_iput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_5D_EightByteInt

   function nf90mpi_iput_var_6D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_6D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_6D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_6D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_EightByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_EightByteInt = &
             nfmpi_iput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_6D_EightByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_EightByteInt = &
             nfmpi_iput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_6D_EightByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_6D_EightByteInt = &
             nfmpi_iput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_6D_EightByteInt

   function nf90mpi_iput_var_7D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iput_var_7D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_7D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_7D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_EightByteInt = &
             nfmpi_iput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_EightByteInt = &
             nfmpi_iput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iput_var_7D_EightByteInt = &
             nfmpi_iput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_EightByteInt = &
             nfmpi_iput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iput_var_7D_EightByteInt = &
             nfmpi_iput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iput_var_7D_EightByteInt = &
             nfmpi_iput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_7D_EightByteInt


!
! iget APIs
!

   function nf90mpi_iget_var_1D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_1D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_1D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_1D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_OneByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_OneByteInt = &
             nfmpi_iget_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_OneByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_OneByteInt = &
             nfmpi_iget_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_1D_OneByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_OneByteInt = &
             nfmpi_iget_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_1D_OneByteInt

   function nf90mpi_iget_var_2D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_2D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_2D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_2D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_OneByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_OneByteInt = &
             nfmpi_iget_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_OneByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_OneByteInt = &
             nfmpi_iget_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_2D_OneByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_OneByteInt = &
             nfmpi_iget_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_2D_OneByteInt

   function nf90mpi_iget_var_3D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_3D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_3D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_3D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_OneByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_OneByteInt = &
             nfmpi_iget_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_OneByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_OneByteInt = &
             nfmpi_iget_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_3D_OneByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_OneByteInt = &
             nfmpi_iget_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_3D_OneByteInt

   function nf90mpi_iget_var_4D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_4D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_4D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_4D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_OneByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_OneByteInt = &
             nfmpi_iget_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_OneByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_OneByteInt = &
             nfmpi_iget_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_4D_OneByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_OneByteInt = &
             nfmpi_iget_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_4D_OneByteInt

   function nf90mpi_iget_var_5D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_5D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_5D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_5D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_OneByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_OneByteInt = &
             nfmpi_iget_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_OneByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_OneByteInt = &
             nfmpi_iget_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_5D_OneByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_OneByteInt = &
             nfmpi_iget_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_5D_OneByteInt

   function nf90mpi_iget_var_6D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_6D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_6D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_6D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_OneByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_OneByteInt = &
             nfmpi_iget_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_OneByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_OneByteInt = &
             nfmpi_iget_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_6D_OneByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_OneByteInt = &
             nfmpi_iget_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_6D_OneByteInt

   function nf90mpi_iget_var_7D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_7D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_7D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_7D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_OneByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_OneByteInt = &
             nfmpi_iget_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_OneByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_OneByteInt = &
             nfmpi_iget_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_7D_OneByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_OneByteInt = &
             nfmpi_iget_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_7D_OneByteInt


   function nf90mpi_iget_var_1D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_1D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_1D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_1D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_TwoByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_TwoByteInt = &
             nfmpi_iget_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_TwoByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_TwoByteInt = &
             nfmpi_iget_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_1D_TwoByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_TwoByteInt = &
             nfmpi_iget_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_1D_TwoByteInt

   function nf90mpi_iget_var_2D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_2D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_2D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_2D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_TwoByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_TwoByteInt = &
             nfmpi_iget_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_TwoByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_TwoByteInt = &
             nfmpi_iget_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_2D_TwoByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_TwoByteInt = &
             nfmpi_iget_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_2D_TwoByteInt

   function nf90mpi_iget_var_3D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_3D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_3D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_3D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_TwoByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_TwoByteInt = &
             nfmpi_iget_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_TwoByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_TwoByteInt = &
             nfmpi_iget_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_3D_TwoByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_TwoByteInt = &
             nfmpi_iget_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_3D_TwoByteInt

   function nf90mpi_iget_var_4D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_4D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_4D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_4D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_TwoByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_TwoByteInt = &
             nfmpi_iget_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_TwoByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_TwoByteInt = &
             nfmpi_iget_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_4D_TwoByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_TwoByteInt = &
             nfmpi_iget_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_4D_TwoByteInt

   function nf90mpi_iget_var_5D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_5D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_5D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_5D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_TwoByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_TwoByteInt = &
             nfmpi_iget_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_TwoByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_TwoByteInt = &
             nfmpi_iget_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_5D_TwoByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_TwoByteInt = &
             nfmpi_iget_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_5D_TwoByteInt

   function nf90mpi_iget_var_6D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_6D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_6D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_6D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_TwoByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_TwoByteInt = &
             nfmpi_iget_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_TwoByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_TwoByteInt = &
             nfmpi_iget_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_6D_TwoByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_TwoByteInt = &
             nfmpi_iget_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_6D_TwoByteInt

   function nf90mpi_iget_var_7D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_7D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_7D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_7D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_TwoByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_TwoByteInt = &
             nfmpi_iget_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_TwoByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_TwoByteInt = &
             nfmpi_iget_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_7D_TwoByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_TwoByteInt = &
             nfmpi_iget_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_7D_TwoByteInt


   function nf90mpi_iget_var_1D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_1D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_1D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_1D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_FourByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_FourByteInt = &
             nfmpi_iget_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_FourByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_FourByteInt = &
             nfmpi_iget_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_1D_FourByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_FourByteInt = &
             nfmpi_iget_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_1D_FourByteInt

   function nf90mpi_iget_var_2D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_2D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_2D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_2D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_FourByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_FourByteInt = &
             nfmpi_iget_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_FourByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_FourByteInt = &
             nfmpi_iget_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_2D_FourByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_FourByteInt = &
             nfmpi_iget_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_2D_FourByteInt

   function nf90mpi_iget_var_3D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_3D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_3D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_3D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_FourByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_FourByteInt = &
             nfmpi_iget_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_FourByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_FourByteInt = &
             nfmpi_iget_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_3D_FourByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_FourByteInt = &
             nfmpi_iget_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_3D_FourByteInt

   function nf90mpi_iget_var_4D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_4D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_4D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_4D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_FourByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_FourByteInt = &
             nfmpi_iget_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_FourByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_FourByteInt = &
             nfmpi_iget_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_4D_FourByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_FourByteInt = &
             nfmpi_iget_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_4D_FourByteInt

   function nf90mpi_iget_var_5D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_5D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_5D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_5D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_FourByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_FourByteInt = &
             nfmpi_iget_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_FourByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_FourByteInt = &
             nfmpi_iget_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_5D_FourByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_FourByteInt = &
             nfmpi_iget_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_5D_FourByteInt

   function nf90mpi_iget_var_6D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_6D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_6D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_6D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_FourByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_FourByteInt = &
             nfmpi_iget_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_FourByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_FourByteInt = &
             nfmpi_iget_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_6D_FourByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_FourByteInt = &
             nfmpi_iget_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_6D_FourByteInt

   function nf90mpi_iget_var_7D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_7D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_7D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_7D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_FourByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_FourByteInt = &
             nfmpi_iget_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_FourByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_FourByteInt = &
             nfmpi_iget_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_7D_FourByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_FourByteInt = &
             nfmpi_iget_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_7D_FourByteInt


   function nf90mpi_iget_var_1D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_1D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_1D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_1D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_FourByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_FourByteReal = &
             nfmpi_iget_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_FourByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_FourByteReal = &
             nfmpi_iget_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_1D_FourByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_FourByteReal = &
             nfmpi_iget_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_1D_FourByteReal

   function nf90mpi_iget_var_2D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_2D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_2D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_2D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_FourByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_FourByteReal = &
             nfmpi_iget_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_FourByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_FourByteReal = &
             nfmpi_iget_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_2D_FourByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_FourByteReal = &
             nfmpi_iget_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_2D_FourByteReal

   function nf90mpi_iget_var_3D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_3D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_3D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_3D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_FourByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_FourByteReal = &
             nfmpi_iget_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_FourByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_FourByteReal = &
             nfmpi_iget_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_3D_FourByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_FourByteReal = &
             nfmpi_iget_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_3D_FourByteReal

   function nf90mpi_iget_var_4D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_4D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_4D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_4D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_FourByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_FourByteReal = &
             nfmpi_iget_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_FourByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_FourByteReal = &
             nfmpi_iget_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_4D_FourByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_FourByteReal = &
             nfmpi_iget_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_4D_FourByteReal

   function nf90mpi_iget_var_5D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_5D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_5D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_5D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_FourByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_FourByteReal = &
             nfmpi_iget_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_FourByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_FourByteReal = &
             nfmpi_iget_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_5D_FourByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_FourByteReal = &
             nfmpi_iget_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_5D_FourByteReal

   function nf90mpi_iget_var_6D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_6D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_6D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_6D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_FourByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_FourByteReal = &
             nfmpi_iget_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_FourByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_FourByteReal = &
             nfmpi_iget_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_6D_FourByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_FourByteReal = &
             nfmpi_iget_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_6D_FourByteReal

   function nf90mpi_iget_var_7D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_7D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_7D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_7D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_FourByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_FourByteReal = &
             nfmpi_iget_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_FourByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_FourByteReal = &
             nfmpi_iget_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_7D_FourByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_FourByteReal = &
             nfmpi_iget_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_7D_FourByteReal


   function nf90mpi_iget_var_1D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_1D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_1D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_1D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_EightByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_EightByteReal = &
             nfmpi_iget_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_EightByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_EightByteReal = &
             nfmpi_iget_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_1D_EightByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_EightByteReal = &
             nfmpi_iget_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_1D_EightByteReal

   function nf90mpi_iget_var_2D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_2D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_2D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_2D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_EightByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_EightByteReal = &
             nfmpi_iget_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_EightByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_EightByteReal = &
             nfmpi_iget_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_2D_EightByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_EightByteReal = &
             nfmpi_iget_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_2D_EightByteReal

   function nf90mpi_iget_var_3D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_3D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_3D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_3D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_EightByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_EightByteReal = &
             nfmpi_iget_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_EightByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_EightByteReal = &
             nfmpi_iget_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_3D_EightByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_EightByteReal = &
             nfmpi_iget_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_3D_EightByteReal

   function nf90mpi_iget_var_4D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_4D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_4D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_4D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_EightByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_EightByteReal = &
             nfmpi_iget_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_EightByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_EightByteReal = &
             nfmpi_iget_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_4D_EightByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_EightByteReal = &
             nfmpi_iget_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_4D_EightByteReal

   function nf90mpi_iget_var_5D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_5D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_5D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_5D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_EightByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_EightByteReal = &
             nfmpi_iget_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_EightByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_EightByteReal = &
             nfmpi_iget_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_5D_EightByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_EightByteReal = &
             nfmpi_iget_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_5D_EightByteReal

   function nf90mpi_iget_var_6D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_6D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_6D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_6D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_EightByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_EightByteReal = &
             nfmpi_iget_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_EightByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_EightByteReal = &
             nfmpi_iget_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_6D_EightByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_EightByteReal = &
             nfmpi_iget_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_6D_EightByteReal

   function nf90mpi_iget_var_7D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_7D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_7D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_7D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_EightByteReal = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_EightByteReal = &
             nfmpi_iget_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_EightByteReal = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_EightByteReal = &
             nfmpi_iget_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_7D_EightByteReal = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_EightByteReal = &
             nfmpi_iget_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_7D_EightByteReal


   function nf90mpi_iget_var_1D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_1D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_1D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_1D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_EightByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_EightByteInt = &
             nfmpi_iget_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_1D_EightByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_EightByteInt = &
             nfmpi_iget_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_1D_EightByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_1D_EightByteInt = &
             nfmpi_iget_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_1D_EightByteInt

   function nf90mpi_iget_var_2D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_2D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_2D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_2D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_EightByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_EightByteInt = &
             nfmpi_iget_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_2D_EightByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_EightByteInt = &
             nfmpi_iget_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_2D_EightByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_2D_EightByteInt = &
             nfmpi_iget_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_2D_EightByteInt

   function nf90mpi_iget_var_3D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_3D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_3D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_3D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_EightByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_EightByteInt = &
             nfmpi_iget_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_3D_EightByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_EightByteInt = &
             nfmpi_iget_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_3D_EightByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_3D_EightByteInt = &
             nfmpi_iget_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_3D_EightByteInt

   function nf90mpi_iget_var_4D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_4D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_4D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_4D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_EightByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_EightByteInt = &
             nfmpi_iget_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_4D_EightByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_EightByteInt = &
             nfmpi_iget_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_4D_EightByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_4D_EightByteInt = &
             nfmpi_iget_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_4D_EightByteInt

   function nf90mpi_iget_var_5D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_5D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_5D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_5D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_EightByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_EightByteInt = &
             nfmpi_iget_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_5D_EightByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_EightByteInt = &
             nfmpi_iget_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_5D_EightByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_5D_EightByteInt = &
             nfmpi_iget_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_5D_EightByteInt

   function nf90mpi_iget_var_6D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_6D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_6D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_6D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_EightByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_EightByteInt = &
             nfmpi_iget_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_6D_EightByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_EightByteInt = &
             nfmpi_iget_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_6D_EightByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_6D_EightByteInt = &
             nfmpi_iget_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_6D_EightByteInt

   function nf90mpi_iget_var_7D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:,:),                      intent( out) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_iget_var_7D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_7D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_7D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_EightByteInt = &
             nfmpi_iget_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_EightByteInt = &
             nfmpi_iget_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_iget_var_7D_EightByteInt = &
             nfmpi_iget_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_EightByteInt = &
             nfmpi_iget_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_iget_var_7D_EightByteInt = &
             nfmpi_iget_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_iget_var_7D_EightByteInt = &
             nfmpi_iget_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_7D_EightByteInt


!
! bput APIs
!

   function nf90mpi_bput_var_1D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_1D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_1D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_1D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_OneByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_OneByteInt = &
             nfmpi_bput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_OneByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_OneByteInt = &
             nfmpi_bput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_1D_OneByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_OneByteInt = &
             nfmpi_bput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_1D_OneByteInt

   function nf90mpi_bput_var_2D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_2D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_2D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_2D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_OneByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_OneByteInt = &
             nfmpi_bput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_OneByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_OneByteInt = &
             nfmpi_bput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_2D_OneByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_OneByteInt = &
             nfmpi_bput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_2D_OneByteInt

   function nf90mpi_bput_var_3D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_3D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_3D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_3D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_OneByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_OneByteInt = &
             nfmpi_bput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_OneByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_OneByteInt = &
             nfmpi_bput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_3D_OneByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_OneByteInt = &
             nfmpi_bput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_3D_OneByteInt

   function nf90mpi_bput_var_4D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_4D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_4D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_4D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_OneByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_OneByteInt = &
             nfmpi_bput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_OneByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_OneByteInt = &
             nfmpi_bput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_4D_OneByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_OneByteInt = &
             nfmpi_bput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_4D_OneByteInt

   function nf90mpi_bput_var_5D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_5D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_5D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_5D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_OneByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_OneByteInt = &
             nfmpi_bput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_OneByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_OneByteInt = &
             nfmpi_bput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_5D_OneByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_OneByteInt = &
             nfmpi_bput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_5D_OneByteInt

   function nf90mpi_bput_var_6D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_6D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_6D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_6D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_OneByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_OneByteInt = &
             nfmpi_bput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_OneByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_OneByteInt = &
             nfmpi_bput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_6D_OneByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_OneByteInt = &
             nfmpi_bput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_6D_OneByteInt

   function nf90mpi_bput_var_7D_OneByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=OneByteInt), dimension(:,:,:,:,:,:,:),                      intent( in) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_7D_OneByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_7D_OneByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_7D_OneByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_OneByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_OneByteInt = &
             nfmpi_bput_varm_int1(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_OneByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_OneByteInt = &
             nfmpi_bput_vars_int1(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_7D_OneByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_OneByteInt = &
             nfmpi_bput_vara_int1(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_7D_OneByteInt


   function nf90mpi_bput_var_1D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_1D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_1D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_1D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_TwoByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_TwoByteInt = &
             nfmpi_bput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_TwoByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_TwoByteInt = &
             nfmpi_bput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_1D_TwoByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_TwoByteInt = &
             nfmpi_bput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_1D_TwoByteInt

   function nf90mpi_bput_var_2D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_2D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_2D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_2D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_TwoByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_TwoByteInt = &
             nfmpi_bput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_TwoByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_TwoByteInt = &
             nfmpi_bput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_2D_TwoByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_TwoByteInt = &
             nfmpi_bput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_2D_TwoByteInt

   function nf90mpi_bput_var_3D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_3D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_3D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_3D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_TwoByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_TwoByteInt = &
             nfmpi_bput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_TwoByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_TwoByteInt = &
             nfmpi_bput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_3D_TwoByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_TwoByteInt = &
             nfmpi_bput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_3D_TwoByteInt

   function nf90mpi_bput_var_4D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_4D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_4D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_4D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_TwoByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_TwoByteInt = &
             nfmpi_bput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_TwoByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_TwoByteInt = &
             nfmpi_bput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_4D_TwoByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_TwoByteInt = &
             nfmpi_bput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_4D_TwoByteInt

   function nf90mpi_bput_var_5D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_5D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_5D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_5D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_TwoByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_TwoByteInt = &
             nfmpi_bput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_TwoByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_TwoByteInt = &
             nfmpi_bput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_5D_TwoByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_TwoByteInt = &
             nfmpi_bput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_5D_TwoByteInt

   function nf90mpi_bput_var_6D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_6D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_6D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_6D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_TwoByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_TwoByteInt = &
             nfmpi_bput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_TwoByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_TwoByteInt = &
             nfmpi_bput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_6D_TwoByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_TwoByteInt = &
             nfmpi_bput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_6D_TwoByteInt

   function nf90mpi_bput_var_7D_TwoByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=TwoByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_7D_TwoByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_7D_TwoByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_7D_TwoByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_TwoByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_TwoByteInt = &
             nfmpi_bput_varm_int2(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_TwoByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_TwoByteInt = &
             nfmpi_bput_vars_int2(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_7D_TwoByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_TwoByteInt = &
             nfmpi_bput_vara_int2(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_7D_TwoByteInt


   function nf90mpi_bput_var_1D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_1D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_1D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_1D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_FourByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_FourByteInt = &
             nfmpi_bput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_FourByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_FourByteInt = &
             nfmpi_bput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_1D_FourByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_FourByteInt = &
             nfmpi_bput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_1D_FourByteInt

   function nf90mpi_bput_var_2D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_2D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_2D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_2D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_FourByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_FourByteInt = &
             nfmpi_bput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_FourByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_FourByteInt = &
             nfmpi_bput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_2D_FourByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_FourByteInt = &
             nfmpi_bput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_2D_FourByteInt

   function nf90mpi_bput_var_3D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_3D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_3D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_3D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_FourByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_FourByteInt = &
             nfmpi_bput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_FourByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_FourByteInt = &
             nfmpi_bput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_3D_FourByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_FourByteInt = &
             nfmpi_bput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_3D_FourByteInt

   function nf90mpi_bput_var_4D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_4D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_4D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_4D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_FourByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_FourByteInt = &
             nfmpi_bput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_FourByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_FourByteInt = &
             nfmpi_bput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_4D_FourByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_FourByteInt = &
             nfmpi_bput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_4D_FourByteInt

   function nf90mpi_bput_var_5D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_5D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_5D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_5D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_FourByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_FourByteInt = &
             nfmpi_bput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_FourByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_FourByteInt = &
             nfmpi_bput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_5D_FourByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_FourByteInt = &
             nfmpi_bput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_5D_FourByteInt

   function nf90mpi_bput_var_6D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_6D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_6D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_6D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_FourByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_FourByteInt = &
             nfmpi_bput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_FourByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_FourByteInt = &
             nfmpi_bput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_6D_FourByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_FourByteInt = &
             nfmpi_bput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_6D_FourByteInt

   function nf90mpi_bput_var_7D_FourByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=FourByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_7D_FourByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_7D_FourByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_7D_FourByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_FourByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_FourByteInt = &
             nfmpi_bput_varm_int(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_FourByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_FourByteInt = &
             nfmpi_bput_vars_int(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_7D_FourByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_FourByteInt = &
             nfmpi_bput_vara_int(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_7D_FourByteInt


   function nf90mpi_bput_var_1D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_1D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_1D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_1D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_FourByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_FourByteReal = &
             nfmpi_bput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_FourByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_FourByteReal = &
             nfmpi_bput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_1D_FourByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_FourByteReal = &
             nfmpi_bput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_1D_FourByteReal

   function nf90mpi_bput_var_2D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_2D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_2D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_2D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_FourByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_FourByteReal = &
             nfmpi_bput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_FourByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_FourByteReal = &
             nfmpi_bput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_2D_FourByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_FourByteReal = &
             nfmpi_bput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_2D_FourByteReal

   function nf90mpi_bput_var_3D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_3D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_3D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_3D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_FourByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_FourByteReal = &
             nfmpi_bput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_FourByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_FourByteReal = &
             nfmpi_bput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_3D_FourByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_FourByteReal = &
             nfmpi_bput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_3D_FourByteReal

   function nf90mpi_bput_var_4D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_4D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_4D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_4D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_FourByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_FourByteReal = &
             nfmpi_bput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_FourByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_FourByteReal = &
             nfmpi_bput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_4D_FourByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_FourByteReal = &
             nfmpi_bput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_4D_FourByteReal

   function nf90mpi_bput_var_5D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_5D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_5D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_5D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_FourByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_FourByteReal = &
             nfmpi_bput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_FourByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_FourByteReal = &
             nfmpi_bput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_5D_FourByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_FourByteReal = &
             nfmpi_bput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_5D_FourByteReal

   function nf90mpi_bput_var_6D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_6D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_6D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_6D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_FourByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_FourByteReal = &
             nfmpi_bput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_FourByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_FourByteReal = &
             nfmpi_bput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_6D_FourByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_FourByteReal = &
             nfmpi_bput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_6D_FourByteReal

   function nf90mpi_bput_var_7D_FourByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=FourByteReal), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_7D_FourByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_7D_FourByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_7D_FourByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_FourByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_FourByteReal = &
             nfmpi_bput_varm_real(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_FourByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_FourByteReal = &
             nfmpi_bput_vars_real(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_7D_FourByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_FourByteReal = &
             nfmpi_bput_vara_real(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_7D_FourByteReal


   function nf90mpi_bput_var_1D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_1D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_1D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_1D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_EightByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_EightByteReal = &
             nfmpi_bput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_EightByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_EightByteReal = &
             nfmpi_bput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_1D_EightByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_EightByteReal = &
             nfmpi_bput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_1D_EightByteReal

   function nf90mpi_bput_var_2D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_2D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_2D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_2D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_EightByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_EightByteReal = &
             nfmpi_bput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_EightByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_EightByteReal = &
             nfmpi_bput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_2D_EightByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_EightByteReal = &
             nfmpi_bput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_2D_EightByteReal

   function nf90mpi_bput_var_3D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_3D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_3D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_3D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_EightByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_EightByteReal = &
             nfmpi_bput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_EightByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_EightByteReal = &
             nfmpi_bput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_3D_EightByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_EightByteReal = &
             nfmpi_bput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_3D_EightByteReal

   function nf90mpi_bput_var_4D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_4D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_4D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_4D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_EightByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_EightByteReal = &
             nfmpi_bput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_EightByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_EightByteReal = &
             nfmpi_bput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_4D_EightByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_EightByteReal = &
             nfmpi_bput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_4D_EightByteReal

   function nf90mpi_bput_var_5D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_5D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_5D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_5D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_EightByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_EightByteReal = &
             nfmpi_bput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_EightByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_EightByteReal = &
             nfmpi_bput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_5D_EightByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_EightByteReal = &
             nfmpi_bput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_5D_EightByteReal

   function nf90mpi_bput_var_6D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_6D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_6D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_6D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_EightByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_EightByteReal = &
             nfmpi_bput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_EightByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_EightByteReal = &
             nfmpi_bput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_6D_EightByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_EightByteReal = &
             nfmpi_bput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_6D_EightByteReal

   function nf90mpi_bput_var_7D_EightByteReal(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     real (kind=EightByteReal), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_7D_EightByteReal
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_7D_EightByteReal = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_7D_EightByteReal .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_EightByteReal = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_EightByteReal = &
             nfmpi_bput_varm_double(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_EightByteReal = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_EightByteReal = &
             nfmpi_bput_vars_double(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_7D_EightByteReal = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_EightByteReal = &
             nfmpi_bput_vara_double(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_7D_EightByteReal


   function nf90mpi_bput_var_1D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_1D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_1D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_1D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:1) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_EightByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_EightByteInt = &
             nfmpi_bput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_1D_EightByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_EightByteInt = &
             nfmpi_bput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_1D_EightByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_1D_EightByteInt = &
             nfmpi_bput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_1D_EightByteInt

   function nf90mpi_bput_var_2D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_2D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_2D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_2D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:2) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_EightByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_EightByteInt = &
             nfmpi_bput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_2D_EightByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_EightByteInt = &
             nfmpi_bput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_2D_EightByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_2D_EightByteInt = &
             nfmpi_bput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_2D_EightByteInt

   function nf90mpi_bput_var_3D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_3D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_3D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_3D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:3) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_EightByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_EightByteInt = &
             nfmpi_bput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_3D_EightByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_EightByteInt = &
             nfmpi_bput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_3D_EightByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_3D_EightByteInt = &
             nfmpi_bput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_3D_EightByteInt

   function nf90mpi_bput_var_4D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_4D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_4D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_4D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:4) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_EightByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_EightByteInt = &
             nfmpi_bput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_4D_EightByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_EightByteInt = &
             nfmpi_bput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_4D_EightByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_4D_EightByteInt = &
             nfmpi_bput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_4D_EightByteInt

   function nf90mpi_bput_var_5D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_5D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_5D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_5D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:5) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_EightByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_EightByteInt = &
             nfmpi_bput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_5D_EightByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_EightByteInt = &
             nfmpi_bput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_5D_EightByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_5D_EightByteInt = &
             nfmpi_bput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_5D_EightByteInt

   function nf90mpi_bput_var_6D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_6D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_6D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_6D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:6) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_EightByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_EightByteInt = &
             nfmpi_bput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_6D_EightByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_EightByteInt = &
             nfmpi_bput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_6D_EightByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_6D_EightByteInt = &
             nfmpi_bput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_6D_EightByteInt

   function nf90mpi_bput_var_7D_EightByteInt(ncid, varid, values, req, start, count, stride, map, bufcount, buftype)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer (kind=EightByteInt), dimension(:,:,:,:,:,:,:),                      intent( INOUT) :: values
     integer,                                          intent(out) :: req
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)
     integer (kind=MPI_OFFSET_KIND),         optional, intent( in) :: bufcount
     integer,                                optional, intent( in) :: buftype

     integer                                 :: nf90mpi_bput_var_7D_EightByteInt
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_7D_EightByteInt = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_7D_EightByteInt .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(:7) = shape(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_EightByteInt = &
             nfmpi_bput_varm(ncid, varid, localStart, localCount, localStride, map, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_EightByteInt = &
             nfmpi_bput_varm_int8(ncid, varid, localStart, localCount, localStride, map, values, req)
         endif
     else if (present(stride)) then
         if (present(buftype)) then
             nf90mpi_bput_var_7D_EightByteInt = &
             nfmpi_bput_vars(ncid, varid, localStart, localCount, localStride, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_EightByteInt = &
             nfmpi_bput_vars_int8(ncid, varid, localStart, localCount, localStride, values, req)
         endif
     else
         if (present(buftype)) then
             nf90mpi_bput_var_7D_EightByteInt = &
             nfmpi_bput_vara(ncid, varid, localStart, localCount, values, bufcount, buftype, req)
         else
             nf90mpi_bput_var_7D_EightByteInt = &
             nfmpi_bput_vara_int8(ncid, varid, localStart, localCount, values, req)
         endif
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_7D_EightByteInt


!
! Other nonblocking control APIs
!

   function nf90mpi_wait(ncid, num, req, st)
     integer,               intent(in)    :: ncid, num
     integer, dimension(:), intent(inout) :: req
     integer, dimension(:), intent(out)   :: st
     integer                              :: nf90mpi_wait

     nf90mpi_wait = nfmpi_wait(ncid, num, req, st)
   end function nf90mpi_wait

   function nf90mpi_wait_all(ncid, num, req, st)
     integer,               intent(in)    :: ncid, num
     integer, dimension(:), intent(inout) :: req
     integer, dimension(:), intent(out)   :: st
     integer                              :: nf90mpi_wait_all

     nf90mpi_wait_all = nfmpi_wait_all(ncid, num, req, st)
   end function nf90mpi_wait_all

   function nf90mpi_cancel(ncid, num, req, st)
     integer,               intent(in)    :: ncid, num
     integer, dimension(:), intent(inout) :: req
     integer, dimension(:), intent(out)   :: st
     integer                              :: nf90mpi_cancel

     nf90mpi_cancel = nfmpi_cancel(ncid, num, req, st)
   end function nf90mpi_cancel

   function nf90mpi_buffer_attach(ncid, bufsize)
     integer,                        intent( in) :: ncid
     integer (kind=MPI_OFFSET_KIND), intent( in) :: bufsize
     integer                                     :: nf90mpi_buffer_attach

     nf90mpi_buffer_attach = nfmpi_buffer_attach(ncid, bufsize)
   end function nf90mpi_buffer_attach

   function nf90mpi_inq_buffer_usage(ncid, usage)
     integer,                        intent( in) :: ncid
     integer (kind=MPI_OFFSET_KIND), intent(out) :: usage
     integer                                     :: nf90mpi_inq_buffer_usage

     nf90mpi_inq_buffer_usage = nfmpi_inq_buffer_usage(ncid, usage)
   end function nf90mpi_inq_buffer_usage

   function nf90mpi_inq_buffer_size(ncid, buf_size)
     integer,                        intent( in) :: ncid
     integer (kind=MPI_OFFSET_KIND), intent(out) :: buf_size
     integer                                     :: nf90mpi_inq_buffer_size

     nf90mpi_inq_buffer_size = nfmpi_inq_buffer_usage(ncid, buf_size)
   end function nf90mpi_inq_buffer_size

   function nf90mpi_buffer_detach(ncid)
     integer,                       intent( in) :: ncid
     integer                                    :: nf90mpi_buffer_detach

     nf90mpi_buffer_detach = nfmpi_buffer_detach(ncid)
   end function nf90mpi_buffer_detach

