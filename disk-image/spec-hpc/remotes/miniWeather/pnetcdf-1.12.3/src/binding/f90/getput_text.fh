! Do not edit this file. It is produced from the corresponding .m4 source
!
!  Copyright (C) 2013, Northwestern University and Argonne National Laboratory
!  See COPYRIGHT notice in top-level directory.
!
! $Id$
!


!
! Independent put APIs
!

   function nf90mpi_put_var_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*),                                intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount (:) = 1
         if (numDims .GT. 0) localCount (1) = LEN(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_text = &
         nfmpi_put_varm_text(ncid, varid, localStart, localCount, localStride, map, values)
     else
         nf90mpi_put_var_text = &
         nfmpi_put_vars_text(ncid, varid, localStart, localCount, localStride, values)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_text

   function nf90mpi_get_var_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*),                                intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount (:) = 1
         if (numDims .GT. 0) localCount (1) = LEN(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_text = &
         nfmpi_get_varm_text(ncid, varid, localStart, localCount, localStride, map, values)
     else
         nf90mpi_get_var_text = &
         nfmpi_get_vars_text(ncid, varid, localStart, localCount, localStride, values)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_text


!
! Collective put APIs
!

   function nf90mpi_put_var_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*),                                intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount (:) = 1
         if (numDims .GT. 0) localCount (1) = LEN(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_text_all = &
         nfmpi_put_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values)
     else
         nf90mpi_put_var_text_all = &
         nfmpi_put_vars_text_all(ncid, varid, localStart, localCount, localStride, values)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_text_all

   function nf90mpi_get_var_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*),                                intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount (:) = 1
         if (numDims .GT. 0) localCount (1) = LEN(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_text_all = &
         nfmpi_get_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values)
     else
         nf90mpi_get_var_text_all = &
         nfmpi_get_vars_text_all(ncid, varid, localStart, localCount, localStride, values)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_text_all




   function nf90mpi_put_var_1D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_1D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:1+1) = (/ LEN(values(1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_1D_text = &
         nfmpi_put_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1))
     else
         nf90mpi_put_var_1D_text = &
         nfmpi_put_vars_text(ncid, varid, localStart, localCount, localStride, values(1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_text

   function nf90mpi_put_var_2D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_2D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:2+1) = (/ LEN(values(1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_2D_text = &
         nfmpi_put_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1))
     else
         nf90mpi_put_var_2D_text = &
         nfmpi_put_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_text

   function nf90mpi_put_var_3D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_3D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:3+1) = (/ LEN(values(1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_3D_text = &
         nfmpi_put_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1))
     else
         nf90mpi_put_var_3D_text = &
         nfmpi_put_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_text

   function nf90mpi_put_var_4D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_4D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:4+1) = (/ LEN(values(1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_4D_text = &
         nfmpi_put_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1))
     else
         nf90mpi_put_var_4D_text = &
         nfmpi_put_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_text

   function nf90mpi_put_var_5D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_5D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:5+1) = (/ LEN(values(1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_5D_text = &
         nfmpi_put_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1))
     else
         nf90mpi_put_var_5D_text = &
         nfmpi_put_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_text

   function nf90mpi_put_var_6D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_6D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:6+1) = (/ LEN(values(1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_6D_text = &
         nfmpi_put_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1))
     else
         nf90mpi_put_var_6D_text = &
         nfmpi_put_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_text

   function nf90mpi_put_var_7D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:,:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_7D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:7+1) = (/ LEN(values(1,1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_7D_text = &
         nfmpi_put_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1,1))
     else
         nf90mpi_put_var_7D_text = &
         nfmpi_put_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_text


   function nf90mpi_get_var_1D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_1D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:1+1) = (/ LEN(values(1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_1D_text = &
         nfmpi_get_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1))
     else
         nf90mpi_get_var_1D_text = &
         nfmpi_get_vars_text(ncid, varid, localStart, localCount, localStride, values(1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_text

   function nf90mpi_get_var_2D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_2D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:2+1) = (/ LEN(values(1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_2D_text = &
         nfmpi_get_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1))
     else
         nf90mpi_get_var_2D_text = &
         nfmpi_get_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_text

   function nf90mpi_get_var_3D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_3D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:3+1) = (/ LEN(values(1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_3D_text = &
         nfmpi_get_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1))
     else
         nf90mpi_get_var_3D_text = &
         nfmpi_get_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_text

   function nf90mpi_get_var_4D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_4D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:4+1) = (/ LEN(values(1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_4D_text = &
         nfmpi_get_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1))
     else
         nf90mpi_get_var_4D_text = &
         nfmpi_get_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_text

   function nf90mpi_get_var_5D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_5D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:5+1) = (/ LEN(values(1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_5D_text = &
         nfmpi_get_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1))
     else
         nf90mpi_get_var_5D_text = &
         nfmpi_get_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_text

   function nf90mpi_get_var_6D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_6D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:6+1) = (/ LEN(values(1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_6D_text = &
         nfmpi_get_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1))
     else
         nf90mpi_get_var_6D_text = &
         nfmpi_get_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_text

   function nf90mpi_get_var_7D_text(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:,:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_7D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:7+1) = (/ LEN(values(1,1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_7D_text = &
         nfmpi_get_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1,1))
     else
         nf90mpi_get_var_7D_text = &
         nfmpi_get_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_text


!
! Collective APIs
!

   function nf90mpi_put_var_1D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_1D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_1D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_1D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:1+1) = (/ LEN(values(1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_1D_text_all = &
         nfmpi_put_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1))
     else
         nf90mpi_put_var_1D_text_all = &
         nfmpi_put_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_1D_text_all

   function nf90mpi_put_var_2D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_2D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_2D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_2D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:2+1) = (/ LEN(values(1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_2D_text_all = &
         nfmpi_put_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1))
     else
         nf90mpi_put_var_2D_text_all = &
         nfmpi_put_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_2D_text_all

   function nf90mpi_put_var_3D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_3D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_3D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_3D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:3+1) = (/ LEN(values(1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_3D_text_all = &
         nfmpi_put_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1,1))
     else
         nf90mpi_put_var_3D_text_all = &
         nfmpi_put_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_3D_text_all

   function nf90mpi_put_var_4D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_4D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_4D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_4D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:4+1) = (/ LEN(values(1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_4D_text_all = &
         nfmpi_put_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1))
     else
         nf90mpi_put_var_4D_text_all = &
         nfmpi_put_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_4D_text_all

   function nf90mpi_put_var_5D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_5D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_5D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_5D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:5+1) = (/ LEN(values(1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_5D_text_all = &
         nfmpi_put_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1))
     else
         nf90mpi_put_var_5D_text_all = &
         nfmpi_put_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_5D_text_all

   function nf90mpi_put_var_6D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_6D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_6D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_6D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:6+1) = (/ LEN(values(1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_6D_text_all = &
         nfmpi_put_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1))
     else
         nf90mpi_put_var_6D_text_all = &
         nfmpi_put_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_6D_text_all

   function nf90mpi_put_var_7D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:,:,:),                 intent(in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_put_var_7D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_put_var_7D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_put_var_7D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:7+1) = (/ LEN(values(1,1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_put_var_7D_text_all = &
         nfmpi_put_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1,1))
     else
         nf90mpi_put_var_7D_text_all = &
         nfmpi_put_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_put_var_7D_text_all


   function nf90mpi_get_var_1D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_1D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_1D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_1D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:1+1) = (/ LEN(values(1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_1D_text_all = &
         nfmpi_get_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1))
     else
         nf90mpi_get_var_1D_text_all = &
         nfmpi_get_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_1D_text_all

   function nf90mpi_get_var_2D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_2D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_2D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_2D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:2+1) = (/ LEN(values(1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_2D_text_all = &
         nfmpi_get_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1))
     else
         nf90mpi_get_var_2D_text_all = &
         nfmpi_get_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_2D_text_all

   function nf90mpi_get_var_3D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_3D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_3D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_3D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:3+1) = (/ LEN(values(1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_3D_text_all = &
         nfmpi_get_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1,1))
     else
         nf90mpi_get_var_3D_text_all = &
         nfmpi_get_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_3D_text_all

   function nf90mpi_get_var_4D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_4D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_4D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_4D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:4+1) = (/ LEN(values(1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_4D_text_all = &
         nfmpi_get_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1))
     else
         nf90mpi_get_var_4D_text_all = &
         nfmpi_get_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_4D_text_all

   function nf90mpi_get_var_5D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_5D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_5D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_5D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:5+1) = (/ LEN(values(1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_5D_text_all = &
         nfmpi_get_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1))
     else
         nf90mpi_get_var_5D_text_all = &
         nfmpi_get_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_5D_text_all

   function nf90mpi_get_var_6D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_6D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_6D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_6D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:6+1) = (/ LEN(values(1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_6D_text_all = &
         nfmpi_get_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1))
     else
         nf90mpi_get_var_6D_text_all = &
         nfmpi_get_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_6D_text_all

   function nf90mpi_get_var_7D_text_all(ncid, varid, values, start, count, stride, map)
     integer,                                          intent(in) :: ncid
     integer,                                          intent(in) :: varid
     character (len=*), dimension(:,:,:,:,:,:,:),                 intent(out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent(in) :: map(:)

     integer                                 :: nf90mpi_get_var_7D_text_all
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_get_var_7D_text_all = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_get_var_7D_text_all .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:7+1) = (/ LEN(values(1,1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_get_var_7D_text_all = &
         nfmpi_get_varm_text_all(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1,1))
     else
         nf90mpi_get_var_7D_text_all = &
         nfmpi_get_vars_text_all(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1,1))
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_get_var_7D_text_all


!
! Nonblocking APIs
!


!
! iput APIs
!

   function nf90mpi_iput_var_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*),                                intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iput_var_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(1) = LEN(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iput_var_text = &
         nfmpi_iput_varm_text(ncid, varid, localStart, localCount, localStride, map, values, req)
     else
         nf90mpi_iput_var_text = &
         nfmpi_iput_vars_text(ncid, varid, localStart, localCount, localStride, values, req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_text

   function nf90mpi_iget_var_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*),                                intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iget_var_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(1) = LEN(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iget_var_text = &
         nfmpi_iget_varm_text(ncid, varid, localStart, localCount, localStride, map, values, req)
     else
         nf90mpi_iget_var_text = &
         nfmpi_iget_vars_text(ncid, varid, localStart, localCount, localStride, values, req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_text


!
! bput APIs
!

   function nf90mpi_bput_var_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*),                                intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_bput_var_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 1
         if (numDims .GT. 0) localCount(1) = LEN(values)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_bput_var_text = &
         nfmpi_bput_varm_text(ncid, varid, localStart, localCount, localStride, map, values, req)
     else
         nf90mpi_bput_var_text = &
         nfmpi_bput_vars_text(ncid, varid, localStart, localCount, localStride, values, req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_text




   function nf90mpi_iput_var_1D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iput_var_1D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_1D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_1D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:1+1) = (/ LEN(values(1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iput_var_1D_text = &
         nfmpi_iput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1), req)
     else
         nf90mpi_iput_var_1D_text = &
         nfmpi_iput_vars_text(ncid, varid, localStart, localCount, localStride, values(1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_1D_text

   function nf90mpi_iput_var_2D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iput_var_2D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_2D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_2D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:2+1) = (/ LEN(values(1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iput_var_2D_text = &
         nfmpi_iput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1), req)
     else
         nf90mpi_iput_var_2D_text = &
         nfmpi_iput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_2D_text

   function nf90mpi_iput_var_3D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iput_var_3D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_3D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_3D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:3+1) = (/ LEN(values(1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iput_var_3D_text = &
         nfmpi_iput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1), req)
     else
         nf90mpi_iput_var_3D_text = &
         nfmpi_iput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_3D_text

   function nf90mpi_iput_var_4D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iput_var_4D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_4D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_4D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:4+1) = (/ LEN(values(1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iput_var_4D_text = &
         nfmpi_iput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1), req)
     else
         nf90mpi_iput_var_4D_text = &
         nfmpi_iput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_4D_text

   function nf90mpi_iput_var_5D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iput_var_5D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_5D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_5D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:5+1) = (/ LEN(values(1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iput_var_5D_text = &
         nfmpi_iput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1), req)
     else
         nf90mpi_iput_var_5D_text = &
         nfmpi_iput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_5D_text

   function nf90mpi_iput_var_6D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:,:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iput_var_6D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_6D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_6D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:6+1) = (/ LEN(values(1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iput_var_6D_text = &
         nfmpi_iput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1), req)
     else
         nf90mpi_iput_var_6D_text = &
         nfmpi_iput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_6D_text

   function nf90mpi_iput_var_7D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:,:,:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iput_var_7D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iput_var_7D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iput_var_7D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:7+1) = (/ LEN(values(1,1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iput_var_7D_text = &
         nfmpi_iput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1,1), req)
     else
         nf90mpi_iput_var_7D_text = &
         nfmpi_iput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iput_var_7D_text


   function nf90mpi_iget_var_1D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:),                 intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iget_var_1D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_1D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_1D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:1+1) = (/ LEN(values(1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iget_var_1D_text = &
         nfmpi_iget_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1), req)
     else
         nf90mpi_iget_var_1D_text = &
         nfmpi_iget_vars_text(ncid, varid, localStart, localCount, localStride, values(1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_1D_text

   function nf90mpi_iget_var_2D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:),                 intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iget_var_2D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_2D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_2D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:2+1) = (/ LEN(values(1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iget_var_2D_text = &
         nfmpi_iget_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1), req)
     else
         nf90mpi_iget_var_2D_text = &
         nfmpi_iget_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_2D_text

   function nf90mpi_iget_var_3D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:),                 intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iget_var_3D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_3D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_3D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:3+1) = (/ LEN(values(1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iget_var_3D_text = &
         nfmpi_iget_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1), req)
     else
         nf90mpi_iget_var_3D_text = &
         nfmpi_iget_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_3D_text

   function nf90mpi_iget_var_4D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:),                 intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iget_var_4D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_4D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_4D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:4+1) = (/ LEN(values(1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iget_var_4D_text = &
         nfmpi_iget_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1), req)
     else
         nf90mpi_iget_var_4D_text = &
         nfmpi_iget_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_4D_text

   function nf90mpi_iget_var_5D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:,:),                 intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iget_var_5D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_5D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_5D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:5+1) = (/ LEN(values(1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iget_var_5D_text = &
         nfmpi_iget_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1), req)
     else
         nf90mpi_iget_var_5D_text = &
         nfmpi_iget_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_5D_text

   function nf90mpi_iget_var_6D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:,:,:),                 intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iget_var_6D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_6D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_6D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:6+1) = (/ LEN(values(1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iget_var_6D_text = &
         nfmpi_iget_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1), req)
     else
         nf90mpi_iget_var_6D_text = &
         nfmpi_iget_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_6D_text

   function nf90mpi_iget_var_7D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:,:,:,:),                 intent( out) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_iget_var_7D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_iget_var_7D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_iget_var_7D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:7+1) = (/ LEN(values(1,1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_iget_var_7D_text = &
         nfmpi_iget_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1,1), req)
     else
         nf90mpi_iget_var_7D_text = &
         nfmpi_iget_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_iget_var_7D_text


!
! bput APIs
!

   function nf90mpi_bput_var_1D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_bput_var_1D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_1D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_1D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:1+1) = (/ LEN(values(1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_bput_var_1D_text = &
         nfmpi_bput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1), req)
     else
         nf90mpi_bput_var_1D_text = &
         nfmpi_bput_vars_text(ncid, varid, localStart, localCount, localStride, values(1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_1D_text

   function nf90mpi_bput_var_2D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_bput_var_2D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_2D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_2D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:2+1) = (/ LEN(values(1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_bput_var_2D_text = &
         nfmpi_bput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1), req)
     else
         nf90mpi_bput_var_2D_text = &
         nfmpi_bput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_2D_text

   function nf90mpi_bput_var_3D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_bput_var_3D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_3D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_3D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:3+1) = (/ LEN(values(1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_bput_var_3D_text = &
         nfmpi_bput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1), req)
     else
         nf90mpi_bput_var_3D_text = &
         nfmpi_bput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_3D_text

   function nf90mpi_bput_var_4D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_bput_var_4D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_4D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_4D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:4+1) = (/ LEN(values(1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_bput_var_4D_text = &
         nfmpi_bput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1), req)
     else
         nf90mpi_bput_var_4D_text = &
         nfmpi_bput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_4D_text

   function nf90mpi_bput_var_5D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_bput_var_5D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_5D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_5D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:5+1) = (/ LEN(values(1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_bput_var_5D_text = &
         nfmpi_bput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1), req)
     else
         nf90mpi_bput_var_5D_text = &
         nfmpi_bput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_5D_text

   function nf90mpi_bput_var_6D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:,:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_bput_var_6D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_6D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_6D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:6+1) = (/ LEN(values(1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_bput_var_6D_text = &
         nfmpi_bput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1), req)
     else
         nf90mpi_bput_var_6D_text = &
         nfmpi_bput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_6D_text

   function nf90mpi_bput_var_7D_text(ncid, varid, values, req, start, count, stride, map)
     integer,                                          intent( in) :: ncid
     integer,                                          intent( in) :: varid
     integer,                                          intent(out) :: req
     character (len=*), dimension(:,:,:,:,:,:,:),                 intent( in) :: values
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: start(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: count(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: stride(:)
     integer (kind=MPI_OFFSET_KIND), target, optional, intent( in) :: map(:)

     integer                                 :: nf90mpi_bput_var_7D_text
     integer (kind=MPI_OFFSET_KIND), pointer :: localStart(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localCount(:)
     integer (kind=MPI_OFFSET_KIND), pointer :: localStride(:)
     integer                                 :: numDims

     ! inquire variable dimensionality
     nf90mpi_bput_var_7D_text = nfmpi_inq_varndims(ncid, varid, numDims)
     if (nf90mpi_bput_var_7D_text .NE. NF_NOERR) return

     if (.NOT. present(start)) then
         ! allocate and set default localStart
         allocate(localStart(numDims))
         localStart(:) = 1
     else
         localStart => start
     endif
     if (.NOT. present(count)) then
         ! allocate and set default localStart
         allocate(localCount(numDims))
         localCount(:) = 0
         if (numDims .GT. 0) localCount(:7+1) = (/ LEN(values(1,1,1,1,1,1,1)), shape(values) /)
     else
         localCount => count
     endif
     if (.NOT. present(stride)) then
         ! allocate and set default localStride
         allocate(localStride(numDims))
         localStride(:) = 1
     else
         localStride => stride
     endif

     if (present(map)) then
         nf90mpi_bput_var_7D_text = &
         nfmpi_bput_varm_text(ncid, varid, localStart, localCount, localStride, map, values(1,1,1,1,1,1,1), req)
     else
         nf90mpi_bput_var_7D_text = &
         nfmpi_bput_vars_text(ncid, varid, localStart, localCount, localStride, values(1,1,1,1,1,1,1), req)
     endif

     if (.NOT. present(start))  deallocate(localStart)
     if (.NOT. present(count))  deallocate(localCount)
     if (.NOT. present(stride)) deallocate(localStride)
   end function nf90mpi_bput_var_7D_text


