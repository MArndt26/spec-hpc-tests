.nr yr \n(yr+1900
.af mo 01
.af dy 01
.TH PnetCDF 3f "PnetCDF 1.12.3" "Printed: \n(yr-\n(mo-\n(dy" "LIBRARY FUNCTIONS"
.SH NAME
PnetCDF \- Parallel library for accessing files in Network Common Data Form (CDF, CDF-2 and CDF-5 formats)
.SH SYNOPSIS
.ft B
.na
.nh
include "pnetcdf.inc"
.sp
.SS Most Systems:
mpif77 ...  -lpnetcdf
.sp
.SS CRAY PVP Systems:
f90 -dp -i64 ... -lnetcdf

.ad
.hy
Complete documentation for the PnetCDF libraries can be found at the PnetCDF website: http://cucis.ece.northwestern.edu/projects/PnetCDF/.
.sp
.SH "LIBRARY VERSION"
.LP
This document describes PnetCDF APIs
for the FORTRAN programming language.
.HP
\fBcharacter*80 nfmpi_inq_libvers(void)\fR
.sp
(Corresponds to \fBnf_inq_libvers(\|)\fR in netCDF)
.sp
Returns a string identifying the version of the PnetCDF library, and
when it was built, like: "1.12.3 of 2022-02-21".
.LP
The RCS \fBident(1)\fP command will find a string like
"$\|Id: @\|(#) PnetCDF library version
1.12.3 of 2022-02-21 $"
in the library. The SCCS \fBwhat(1)\fP command will find a string like
"PnetCDF library version 1.12.3 of 2022-02-21".
.SH "RETURN VALUES"
.LP
All PnetCDF functions (except
\fBnfmpi_inq_libvers(\|)\fR and \fBnfmpi_strerror(\|)\fR) return an integer status.

If this returned status value is not equal to
\fBNF_NOERR\fR (zero), it
indicates that an error occurred. The possible status values are defined in
pnetcdf.inc.
.HP
\fBcharacter*80 nfmpi_strerror(integer \fIstatus\fP)\fR
.sp
(Corresponds to \fBnf_strerror(\|)\fR in netCDF)
.sp
Returns a string textual translation of the \fIstatus\fP
value, like "Attribute or variable name contains illegal characters"
or "No such file or directory".
.sp
.SH "FILE OPERATIONS"
.LP
.HP
\fBinteger function nfmpi_create(integer \fIcomm\fP, character*(*) \fIpath\fP, integer \fIcmode\fP, integer \fIinfo\fP, integer \fIncid\fP)\fR

(Corresponds to \fBnf_create(\|)\fR in netCDF)
.sp
Creates a new netCDF dataset at \fIpath\fP collectively by a group of MPI
processes specified by \fIcomm\fP, returning a netCDF ID in \fIncid\fP.  The
argument \fIcmode\fP may include the bitwise-or of the following flags:
\fBNF_NOCLOBBER\fR to protect existing datasets (default is \fBNF_CLOBBER\fR,
silently blows them away), \fBNF_SHARE\fR for stronger metadata data consistency
control, \fBNF_64BIT_OFFSET\fR to create a file in the 64-bit offset format
(CDF-2), as opposed to classic format, the default, or \fBNF_64BIT_DATA\fR to
create a file in the 64-bit data format (CDF-5).
Use either \fBNF_64BIT_OFFSET\fR or \fBNF_64BIT_DATA\fR.
The 64-bit offset format allows the creation of very large files with far fewer
restrictions than netCDF classic format, but can only be read by the netCDF
library version 3.6 or greater. Users are cautioned that files that use the
64-bit offset format will not be recognized by netCDF applications linked to an
earlier version of the netCDF library than 3.6.  Applications linked to version
3.6 or later will be able to transparently access either the classic format or
64-bit offset format.
The 64-bit data format allows the creation of very large array variables.
CDF-5 files currently will not be recognized by netCDF 3 or 4 library.
.

The argument \fIcmode\fP must be consistent among all MPI processes that
collectively create the file.  The argument \fIinfo\fP is an MPI info object.
Users can use it to supply the file access hints further performance
improvement.  The hints include existing MPI-IO hints as well as hints defined
and used in PnetCDF.
.sp
When a netCDF dataset is created, it is opened in \fBNF_WRITE\fR mode.
When this function returns, the new netCDF dataset is in define mode.
.HP
\fBinteger function nfmpi_open(integer \fIcomm\fP, character*(*) \fIpath\fP, integer \fImode\fP, integer \fIinfo\fP, integer \fIncid\fP)\fR

(Corresponds to \fBnf_open(\|)\fR in netCDF)
.sp
Opens an existing netCDF dataset at \fIpath\fP collectively by a group of MPI
processes specified by \fIcomm\fP, returning a netCDF ID in \fIncid\fP.  The type
of access is described by the \fImode\fP parameter, which may include the
bitwise-or of the following flags: \fBNF_WRITE\fR for read-write access (default
read-only), \fBNF_SHARE\fR for stronger metadata data consistency control.
.sp

The argument \fImode\fP must be consistent among all MPI processes that
collectively open the file.  The argument \fIinfo\fP is an MPI info object.
Users can use it to supply the file access hints further performance
improvement.  The hints include existing MPI-IO hints as well as hints defined
and used in PnetCDF.
.HP
\fBinteger function nfmpi_redef(integer \fIncid\fP)\fR

(Corresponds to \fBnf_redef(\|)\fR in netCDF)
.sp
Puts an open netCDF dataset into define mode,
so dimensions, variables, and attributes can be added or renamed and
attributes can be deleted.
.HP
\fBinteger function nfmpi_enddef(integer \fIncid\fP)\fR

(Corresponds to \fBnf_enddef(\|)\fR in netCDF)
.sp
Takes an open netCDF dataset out of define mode.
The changes made to the netCDF dataset
while it was in define mode are checked and committed to disk if no
problems occurred.
After a successful call, variable data can be read or written to the dataset.
.HP
\fBinteger function nfmpi_sync(integer \fIncid\fP)\fR

(Corresponds to \fBnf_sync(\|)\fR in netCDF)
.sp
Unless the
\fBNF_SHARE\fR
bit is set in
\fBnfmpi_open(\|)\fR or \fBnfmpi_create(\|)\fR,
data written by PnetCDF APIs may be cached by local file system on each compute
node.  This API flushes cached data by calling MPI_File_sync.
.HP
\fBinteger function nfmpi_abort(integer \fIncid\fP)\fR

(Corresponds to \fBnf_abort(\|)\fR in netCDF)
.sp
You don't need to call this function.  This function is called automatically by
\fBnfmpi_close(\|)\fR if the netCDF was in define mode and something goes wrong with
the commit.  If the netCDF dataset isn't in define mode, then this function
is equivalent to \fBnfmpi_close(\|)\fR.  If it is called after \fBnfmpi_redef(\|)\fR, but before
\fBnfmpi_enddef(\|)\fR, the new definitions are not committed and the dataset is closed.
If it is called after \fBnfmpi_create(\|)\fR but before \fBnfmpi_enddef(\|)\fR, the dataset
disappears.
.HP
\fBinteger function nfmpi_close(integer \fIncid\fP)\fR

(Corresponds to \fBnf_close(\|)\fR in netCDF)
.sp
Closes an open netCDF dataset.  If the dataset is in define mode,
\fBnfmpi_enddef(\|)\fR will be called before closing.  After a dataset is closed, its ID
may be reassigned to another dataset.
.HP
\fBinteger function nfmpi_inq(integer \fIncid\fP, integer \fIndims\fP, integer \fInvars\fP,
integer \fInatts\fP, integer \fIunlimdimid\fP)\fR

(Corresponds to \fBnf_inq(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_ndims(integer \fIncid\fP, integer \fIndims\fP)\fR

(Corresponds to \fBnf_inq_ndims(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_nvars(integer \fIncid\fP, integer \fInvars\fP)\fR

(Corresponds to \fBnf_inq_nvars(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_natts(integer \fIncid\fP, integer \fInatts\fP)\fR

(Corresponds to \fBnf_inq_natts(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_unlimdim(integer \fIncid\fP, integer \fIunlimdimid\fP)\fR

(Corresponds to \fBnf_inq_unlimdim(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_format(integer \fIncid\fP, integer \fIformatn\fP)\fR

(Corresponds to \fBnf_inq_format(\|)\fR in netCDF)
.sp
Use these functions to find out what is in a netCDF dataset.
Upon successful return,
\fIndims\fP will contain  the
number of dimensions defined for this netCDF dataset,
\fInvars\fP will contain the number of variables,
\fInatts\fP will contain the number of attributes, and
\fIunlimdimid\fP will contain the
dimension ID of the unlimited dimension if one exists, or
0 otherwise.
\fIformatn\fP will contain the version number of the dataset <format>, one of
\fBNF_FORMAT_CLASSIC\fR, \fBNF_FORMAT_64BIT\fR, or \fBNF_FORMAT_64BIT_DATA\fR.

.HP
\fBinteger function nfmpi_def_dim(integer \fIncid\fP, character*(*) \fIname\fP, integer(kind=MPI_OFFSET) \fIlen\fP, integer \fIdimid\fP)\fR

(Corresponds to \fBnf_def_dim(\|)\fR in netCDF)
.sp
Adds a new dimension to an open netCDF dataset, which must be
in define mode.
\fIname\fP is the dimension name.
\fIdimid\fP will contain the dimension ID of the newly created dimension.

.SH "DIMENSIONS"
.LP
.HP
\fBinteger function nfmpi_inq_dimid(integer \fIncid\fP, character*(*) \fIname\fP, integer \fIdimid\fP)\fR

(Corresponds to \fBnf_inq_dimid(\|)\fR in netCDF)
.sp
Given a dimension name, returns the ID of a netCDF dimension in \fIdimid\fP.
.HP
\fBinteger function nfmpi_inq_dim(integer \fIncid\fP, integer \fIdimid\fP, character*(*) \fIname\fP, integer(kind=MPI_OFFSET) \fIlen\fP)\fR

(Corresponds to \fBnf_inq_dim(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_dimname(integer \fIncid\fP, integer \fIdimid\fP, character*(*) \fIname\fP)\fR

(Corresponds to \fBnf_inq_dimname(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_dimlen(integer \fIncid\fP, integer \fIdimid\fP, integer(kind=MPI_OFFSET) \fIlen\fP)\fR

(Corresponds to \fBnf_inq_dimlen(\|)\fR in netCDF)
.sp
Use these functions to find out about a dimension.

\fIname\fP should be  big enough (\fBNF_MAX_NAME\fR)
to hold the dimension name as the name will be copied into your storage.
The length return parameter, \fIlen\fP
will contain the size of the dimension.
For the unlimited dimension, the returned length is the current
maximum value used for writing into any of the variables which use
the dimension.
.HP
\fBinteger function nfmpi_rename_dim(integer \fIncid\fP, integer \fIdimid\fP, character*(*) \fIname\fP)\fR

(Corresponds to \fBnf_rename_dim(\|)\fR in netCDF)
.sp
Renames an existing dimension in an open netCDF dataset.
If the new name is longer than the old name, the netCDF dataset must be in
define mode.
You cannot rename a dimension to have the same name as another dimension.
.SH "VARIABLES"
.LP
.HP
\fBinteger function nfmpi_def_var(integer \fIncid\fP, character*(*) \fIname\fP, integer \fIxtype\fP, integer \fIndims\fP, integer \fIdimids\fP(1), integer \fIvarid\fP)\fR

(Corresponds to \fBnf_def_var(\|)\fR in netCDF)
.sp
Adds a new variable to a netCDF dataset. The netCDF must be in define mode.
\fIvarid\fP will be set to the netCDF variable ID.
\fIndims\fP will be the number of dimensions for the variable.
\fIname\fP will be the name of the netCDF variable.
\fIxtype\fP is the external, netCDF type of the variable and should be one of
\fBNF_BYTE\fR
\fBNF_CHAR\fR,
\fBNF_SHORT\fR,
\fBNF_INT\fR,
\fBNF_FLOAT\fR, or
\fBNF_DOUBLE\fR,
for CDF-1 and CDF-2 file formats.
CDF-5 defines additional external types:
\fBNF_UBYTE\fR,
\fBNF_USHORT\fR,
\fBNF_UINT\fR,
\fBNF_INT64\fR, and
\fBNF_UINT64\fR.
\fIdimids\fP argument is a vector of ndims dimension IDs corresponding to the
variable dimensions.
.HP
\fBinteger function nfmpi_inq_varid(integer \fIncid\fP, character*(*) \fIname\fP, integer \fIvarid\fP)\fR

(Corresponds to \fBnf_inq_varid(\|)\fR in netCDF)
.sp
Returns the ID of a netCDF variable in \fIvarid\fP given its name.
.HP
\fBinteger function nfmpi_inq_var(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIxtype\fP, integer \fIndims\fP, integer \fIdimids\fP(1),
integer \fInatts\fP)\fR

(Corresponds to \fBnf_inq_var(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_varname(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP)\fR

(Corresponds to \fBnf_inq_varname(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_vartype(integer \fIncid\fP, integer \fIvarid\fP, integer \fIxtype\fP)\fR

(Corresponds to \fBnf_inq_vartype(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_varndims(integer \fIncid\fP, integer \fIvarid\fP, integer \fIndims\fP)\fR

(Corresponds to \fBnf_inq_varndims(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_vardimid(integer \fIncid\fP, integer \fIvarid\fP, integer \fIdimids\fP(1))\fR

(Corresponds to \fBnf_inq_vardimid(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_varnatts(integer \fIncid\fP, integer \fIvarid\fP, integer \fInatts\fP)\fR

(Corresponds to \fBnf_inq_varnatts(\|)\fR in netCDF)
.sp
Returns information about a netCDF variable, given its ID.

.HP
\fBinteger function nfmpi_rename_var(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP)\fR

(Corresponds to \fBnf_rename_var(\|)\fR in netCDF)
.sp
Changes the name of a netCDF variable.
If the new name is longer than the old name, the netCDF must be in define mode.
You cannot rename a variable to have the name of any existing variable.

.SH "WRITING AND READING WHOLE VARIABLES"
.LP
.HP
\fBinteger function nfmpi_put_var_text(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIout\fP)\fR

(Corresponds to \fBnf_put_var_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_var_int1(integer \fIncid\fP, integer \fIvarid\fP, integer*1 \fIout\fP(1))\fR

(Corresponds to \fBnf_put_var_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_var_int2(integer \fIncid\fP, integer \fIvarid\fP, integer*2 \fIout\fP(1))\fR

(Corresponds to \fBnf_put_var_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_var_int(integer \fIncid\fP, integer \fIvarid\fP, integer \fIout\fP(1))\fR

(Corresponds to \fBnf_put_var_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_var_real(integer \fIncid\fP, integer \fIvarid\fP, real \fIout\fP(1))\fR

(Corresponds to \fBnf_put_var_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_var_double(integer \fIncid\fP, integer \fIvarid\fP, doubleprecision \fIout\fP(1))\fR

(Corresponds to \fBnf_put_var_double(\|)\fR in netCDF)


.sp
Writes an entire netCDF variable (i.e. all the values).  The netCDF
dataset must be open and in data mode.  The type of the data is
specified in the function name, and it is converted to the external
type of the specified variable, if possible, otherwise an
\fBNF_ERANGE\fR error is returned. Note that rounding is not performed
during the conversion. Floating point numbers are truncated when
converted to integers.
.HP
\fBinteger function nfmpi_get_var_text(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIin\fP)\fR

(Corresponds to \fBnf_get_var_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_var_int1(integer \fIncid\fP, integer \fIvarid\fP, integer*1 \fIin\fP(1))\fR

(Corresponds to \fBnf_get_var_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_var_int2(integer \fIncid\fP, integer \fIvarid\fP, integer*2 \fIin\fP(1))\fR

(Corresponds to \fBnf_get_var_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_var_int(integer \fIncid\fP, integer \fIvarid\fP, integer \fIin\fP(1))\fR

(Corresponds to \fBnf_get_var_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_var_real(integer \fIncid\fP, integer \fIvarid\fP, real \fIin\fP(1))\fR

(Corresponds to \fBnf_get_var_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_var_double(integer \fIncid\fP, integer \fIvarid\fP, doubleprecision \fIin\fP(1))\fR

(Corresponds to \fBnf_get_var_double(\|)\fR in netCDF)


.sp
Reads an entire netCDF variable (i.e. all the values).
The netCDF dataset must be open and in data mode.
The data is converted from the external type of the specified variable,
if necessary, to the type specified in the function name.  If conversion is
not possible, an \fBNF_ERANGE\fR error is returned.
.SH "WRITING AND READING ONE DATUM"
.LP
.HP
\fBinteger function nfmpi_put_var1_text(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), character*1 \fI*out\fP)\fR

(Corresponds to \fBnf_put_var1_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_var1_int1(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), integer*1 \fI*out\fP)\fR

(Corresponds to \fBnf_put_var1_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_var1_int2(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), integer*2 \fI*out\fP)\fR

(Corresponds to \fBnf_put_var1_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_var1_int(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), integer \fI*out\fP)\fR

(Corresponds to \fBnf_put_var1_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_var1_real(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), real \fI*out\fP)\fR

(Corresponds to \fBnf_put_var1_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_var1_double(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), doubleprecision \fI*out\fP)\fR

(Corresponds to \fBnf_put_var1_double(\|)\fR in netCDF)


.sp
Puts a single data value into a variable at the position \fIindex\fP of an
open netCDF dataset that is in data mode.  The type of the data is
specified in the function name, and it is converted to the external type
of the specified variable, if possible, otherwise an \fBNF_ERANGE\fR
error is returned.
.HP
\fBinteger function nfmpi_get_var1_text(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), character*1 \fIin\fP)\fR

(Corresponds to \fBnf_get_var1_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_var1_int1(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), integer*1 \fIin\fP)\fR

(Corresponds to \fBnf_get_var1_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_var1_int2(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), integer*2 \fIin\fP)\fR

(Corresponds to \fBnf_get_var1_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_var1_int(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), integer \fIin\fP)\fR

(Corresponds to \fBnf_get_var1_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_var1_real(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), real \fIin\fP)\fR

(Corresponds to \fBnf_get_var1_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_var1_double(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIindex\fP(1), doubleprecision \fIin\fP)\fR

(Corresponds to \fBnf_get_var1_double(\|)\fR in netCDF)


.sp
Gets a single data value from a variable at the position \fIindex\fP
of an open netCDF dataset that is in data mode.
The data is converted from the external type of the specified variable,
if necessary, to the type specified in the function name.  If conversion is
not possible, an \fBNF_ERANGE\fR error is returned.
.SH "WRITING AND READING AN ARRAY"
.LP
.HP
\fBinteger function nfmpi_put_vara_text(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), character*(*) \fIout\fP)\fR

(Corresponds to \fBnf_put_vara_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_vara_int1(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer*1 \fIout\fP(1))\fR

(Corresponds to \fBnf_put_vara_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_vara_int2(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer*2 \fIout\fP(1))\fR

(Corresponds to \fBnf_put_vara_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_vara_int(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer \fIout\fP(1))\fR

(Corresponds to \fBnf_put_vara_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_vara_real(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), real \fIout\fP(1))\fR

(Corresponds to \fBnf_put_vara_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_vara_double(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), doubleprecision \fIout\fP(1))\fR

(Corresponds to \fBnf_put_vara_double(\|)\fR in netCDF)


.sp
Writes an array section of values into a netCDF variable of an open
netCDF dataset, which must be in data mode.  The array section is specified
by the \fIstart\fP and \fIcount\fP vectors, which give the starting index
and count of values along each dimension of the specified variable.
The type of the data is
specified in the function name and is converted to the external type
of the specified variable, if possible, otherwise an \fBNF_ERANGE\fR
error is returned.
.HP
\fBinteger function nfmpi_get_vara_text(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), character*(*) \fIin\fP)\fR

(Corresponds to \fBnf_get_vara_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_vara_int1(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer*1 \fIin\fP(1))\fR

(Corresponds to \fBnf_get_vara_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_vara_int2(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer*2 \fIin\fP(1))\fR

(Corresponds to \fBnf_get_vara_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_vara_int(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer \fIin\fP(1))\fR

(Corresponds to \fBnf_get_vara_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_vara_real(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), real \fIin\fP(1))\fR

(Corresponds to \fBnf_get_vara_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_vara_double(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), doubleprecision \fIin\fP(1))\fR

(Corresponds to \fBnf_get_vara_double(\|)\fR in netCDF)


.sp
Reads an array section of values from a netCDF variable of an open
netCDF dataset, which must be in data mode.  The array section is specified
by the \fIstart\fP and \fIcount\fP vectors, which give the starting index
and count of values along each dimension of the specified variable.
The data is converted from the external type of the specified variable,
if necessary, to the type specified in the function name.  If conversion is
not possible, an \fBNF_ERANGE\fR error is returned.
.SH "WRITING AND READING A SLICED ARRAY"
.LP
.HP
\fBinteger function nfmpi_put_vars_text(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), character*(*) \fIout\fP)\fR

(Corresponds to \fBnf_put_vars_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_vars_int1(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer*1 \fIout\fP(1))\fR

(Corresponds to \fBnf_put_vars_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_vars_int2(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer*2 \fIout\fP(1))\fR

(Corresponds to \fBnf_put_vars_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_vars_int(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer \fIout\fP(1))\fR

(Corresponds to \fBnf_put_vars_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_vars_real(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), real \fIout\fP(1))\fR

(Corresponds to \fBnf_put_vars_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_vars_double(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), doubleprecision \fIout\fP(1))\fR

(Corresponds to \fBnf_put_vars_double(\|)\fR in netCDF)


.sp
These functions are used for \fIstrided output\fP, which is like the
array section output described above, except that
the sampling stride (the interval between accessed values) is
specified for each dimension.
For an explanation of the sampling stride
vector, see COMMON ARGUMENTS DESCRIPTIONS below.
.HP
\fBinteger function nfmpi_get_vars_text(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), character*(*) \fIin\fP)\fR

(Corresponds to \fBnf_get_vars_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_vars_int1(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer*1 \fIin\fP(1))\fR

(Corresponds to \fBnf_get_vars_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_vars_int2(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer*2 \fIin\fP(1))\fR

(Corresponds to \fBnf_get_vars_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_vars_int(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer \fIin\fP(1))\fR

(Corresponds to \fBnf_get_vars_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_vars_real(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), real \fIin\fP(1))\fR

(Corresponds to \fBnf_get_vars_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_vars_double(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), doubleprecision \fIin\fP(1))\fR

(Corresponds to \fBnf_get_vars_double(\|)\fR in netCDF)


.sp
These functions are used for \fIstrided input\fP, which is like the
array section input described above, except that
the sampling stride (the interval between accessed values) is
specified for each dimension.
For an explanation of the sampling stride
vector, see COMMON ARGUMENTS DESCRIPTIONS below.
.SH "WRITING AND READING A MAPPED ARRAY"
.LP
.HP
\fBinteger function nfmpi_put_varm_text(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), character*(*) \fIout\fP)\fR

(Corresponds to \fBnf_put_varm_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_varm_int1(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), integer*1 \fIout\fP(1))\fR

(Corresponds to \fBnf_put_varm_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_varm_int2(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), integer*2 \fIout\fP(1))\fR

(Corresponds to \fBnf_put_varm_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_varm_int(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), integer \fIout\fP(1))\fR

(Corresponds to \fBnf_put_varm_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_varm_real(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), real \fIout\fP(1))\fR

(Corresponds to \fBnf_put_varm_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_varm_double(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), doubleprecision \fIout\fP(1))\fR

(Corresponds to \fBnf_put_varm_double(\|)\fR in netCDF)


.sp
These functions are used for \fImapped output\fP, which is like
strided output described above, except that an additional index mapping
vector is provided to specify the in-memory arrangement of the data
values.
For an explanation of the index
mapping vector, see COMMON ARGUMENTS DESCRIPTIONS below.
.HP
\fBinteger function nfmpi_get_varm_text(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), character*(*) \fIin\fP)\fR

(Corresponds to \fBnf_get_varm_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_varm_int1(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), integer*1 \fIin\fP(1))\fR

(Corresponds to \fBnf_get_varm_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_varm_int2(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), integer*2 \fIin\fP(1))\fR

(Corresponds to \fBnf_get_varm_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_varm_int(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), integer \fIin\fP(1))\fR

(Corresponds to \fBnf_get_varm_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_varm_real(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), real \fIin\fP(1))\fR

(Corresponds to \fBnf_get_varm_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_varm_double(integer \fIncid\fP, integer \fIvarid\fP, integer(kind=MPI_OFFSET) \fIstart\fP(1), integer(kind=MPI_OFFSET) \fIcount\fP(1), integer(kind=MPI_OFFSET) \fIstride\fP(1), integer(kind=MPI_OFFSET) \fIimap\fP(1), doubleprecision \fIin\fP(1))\fR

(Corresponds to \fBnf_get_varm_double(\|)\fR in netCDF)


.sp
These functions are used for \fImapped input\fP, which is like
strided input described above, except that an additional index mapping
vector is provided to specify the in-memory arrangement of the data
values.
For an explanation of the index
mapping vector, see COMMON ARGUMENTS DESCRIPTIONS below.
.SH "ATTRIBUTES"
.LP
.HP
\fBinteger function nfmpi_put_att_text(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIxtype\fP, integer(kind=MPI_OFFSET) \fIlen\fP, character*(*) \fIout\fP)\fR

(Corresponds to \fBnf_put_att_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_att_int1(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIxtype\fP, integer(kind=MPI_OFFSET) \fIlen\fP, integer*1 \fIout\fP(1))\fR

(Corresponds to \fBnf_put_att_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_att_int2(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIxtype\fP, integer(kind=MPI_OFFSET) \fIlen\fP, integer*2 \fIout\fP(1))\fR

(Corresponds to \fBnf_put_att_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_att_int(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIxtype\fP, integer(kind=MPI_OFFSET) \fIlen\fP, integer \fIout\fP(1))\fR

(Corresponds to \fBnf_put_att_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_put_att_real(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIxtype\fP, integer(kind=MPI_OFFSET) \fIlen\fP, real \fIout\fP(1))\fR

(Corresponds to \fBnf_put_att_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_put_att_double(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIxtype\fP, integer(kind=MPI_OFFSET) \fIlen\fP, doubleprecision \fIout\fP(1))\fR

(Corresponds to \fBnf_put_att_double(\|)\fR in netCDF)


.HP
\fBinteger function nfmpi_put_att(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIxtype\fP, integer(kind=MPI_OFFSET) \fIlen\fP, void * \fIip\fP)\fR

(Corresponds to \fBnf_put_att(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_att(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, void * \fIip\fP)\fR

(Corresponds to \fBnf_get_att(\|)\fR in netCDF)
.sp
Unlike variables, attributes do not have
separate functions for defining and writing values.
This family of functions defines a new attribute with a value or changes
the value of an existing attribute.
If the attribute is new, or if the space required to
store the attribute value is greater than before,
the netCDF dataset must be in define mode.
The parameter \fIlen\fP is the number of values from \fIout\fP to transfer.
It is often one, except that for
\fBnfmpi_put_att_text(\|)\fR it will usually be
\fBlen_trim(\fIout\fP)\fR.
.sp
For these functions, the type component of the function name refers to
the in-memory type of the value, whereas the \fIxtype\fP argument refers to the
external type for storing the value.  An \fBNF_ERANGE\fR
error results if
a conversion between these types is not possible.  In this case the value
is represented with the appropriate fill-value for the associated
external type.
.HP
\fBinteger function nfmpi_inq_attname(integer \fIncid\fP, integer \fIvarid\fP, integer \fIattnum\fP, character*(*) \fIname\fP)\fR

(Corresponds to \fBnf_inq_attname(\|)\fR in netCDF)
.sp
Gets the
name of an attribute, given its variable ID and attribute number.
This function is useful in generic applications that
need to get the names of all the attributes associated with a variable,
since attributes are accessed by name rather than number in all other
attribute functions.  The number of an attribute is more volatile than
the name, since it can change when other attributes of the same variable
are deleted.  The attributes for each variable are numbered
from 1 (the first attribute) to
\fInvatts\fP,
where \fInvatts\fP is
the number of attributes for the variable, as returned from a call to
\fBnfmpi_inq_varnatts(\|)\fR.

.HP
\fBinteger function nfmpi_inq_att(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIxtype\fP, integer(kind=MPI_OFFSET) \fIlen\fP)\fR

(Corresponds to \fBnf_inq_att(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_attid(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIattnum\fP)\fR

(Corresponds to \fBnf_inq_attid(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_atttype(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIxtype\fP)\fR

(Corresponds to \fBnf_inq_atttype(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_inq_attlen(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer(kind=MPI_OFFSET) \fIlen\fP)\fR

(Corresponds to \fBnf_inq_attlen(\|)\fR in netCDF)
.sp
These functions return information about a netCDF attribute,
given its variable ID and name.  The information returned is the
external type in \fIxtype\fP
and the number of elements in the attribute as \fIlen\fP.

.HP
\fBinteger function nfmpi_copy_att(integer \fIncid\fP, integer \fIvarid_in\fP, character*(*) \fIname\fP, integer \fIncid_out\fP, integer \fIvarid_out\fP)\fR

(Corresponds to \fBnf_copy_att(\|)\fR in netCDF)
.sp
Copies an
attribute from one netCDF dataset to another.  It can also be used to
copy an attribute from one variable to another within the same netCDF.
\fIncid_in\fP is the netCDF ID of an input netCDF dataset from which the
attribute will be copied.
\fIvarid_in\fP
is the ID of the variable in the input netCDF dataset from which the
attribute will be copied, or \fBNF_GLOBAL\fR
for a global attribute.
\fIname\fP
is the name of the attribute in the input netCDF dataset to be copied.
\fIncid_out\fP
is the netCDF ID of the output netCDF dataset to which the attribute will be
copied.
It is permissible for the input and output netCDF ID's to be the same.  The
output netCDF dataset should be in define mode if the attribute to be
copied does not already exist for the target variable, or if it would
cause an existing target attribute to grow.
\fIvarid_out\fP
is the ID of the variable in the output netCDF dataset to which the attribute will
be copied, or \fBNF_GLOBAL\fR to copy to a global attribute.
.HP
\fBinteger function nfmpi_rename_att(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, character*(*) \fInewname\fP)\fR

(Corresponds to \fBnf_rename_att(\|)\fR in netCDF)
.sp
Changes the
name of an attribute.  If the new name is longer than the original name,
the netCDF must be in define mode.  You cannot rename an attribute to
have the same name as another attribute of the same variable.
\fIname\fP is the original attribute name.
\fInewname\fP
is the new name to be assigned to the specified attribute.  If the new name
is longer than the old name, the netCDF dataset must be in define mode.
.HP
\fBinteger function nfmpi_del_att(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP)\fR

(Corresponds to \fBnf_del_att(\|)\fR in netCDF)
.sp
Deletes an attribute from a netCDF dataset.  The dataset must be in
define mode.
.HP
\fBinteger function nfmpi_get_att_text(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, character*(*) \fIin\fP)\fR

(Corresponds to \fBnf_get_att_text(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_att_int1(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer*1 \fIin\fP(1))\fR

(Corresponds to \fBnf_get_att_int1(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_att_int2(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer*2 \fIin\fP(1))\fR

(Corresponds to \fBnf_get_att_int2(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_att_int(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, integer \fIin\fP(1))\fR

(Corresponds to \fBnf_get_att_int(\|)\fR in netCDF)

.HP
\fBinteger function nfmpi_get_att_real(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, real \fIin\fP(1))\fR

(Corresponds to \fBnf_get_att_real(\|)\fR in netCDF)
.HP
\fBinteger function nfmpi_get_att_double(integer \fIncid\fP, integer \fIvarid\fP, character*(*) \fIname\fP, doubleprecision \fIin\fP(1))\fR

(Corresponds to \fBnf_get_att_double(\|)\fR in netCDF)


.sp
Gets the value(s) of a netCDF attribute, given its
variable ID and name.  Converts from the external type to the type
specified in
the function name, if possible, otherwise returns an \fBNF_ERANGE\fR
error.
All elements of the vector of attribute
values are returned, so you must allocate enough space to hold
them.  If you don't know how much space to reserve, call
\fBnfmpi_inq_attlen(\|)\fR
first to find out the length of the attribute.
.SH "COMMON ARGUMENT DESCRIPTIONS"
.LP
In this section we define some common arguments which are used in the
"FUNCTION DESCRIPTIONS" section.
.TP
integer \fIncid\fP
is the netCDF ID returned from a previous, successful call to
\fBnfmpi_open(\|)\fR or \fBnfmpi_create(\|)\fR
.TP
character*(*) \fIname\fP
is the name of a dimension, variable, or attribute. The names of
dimensions, variables and attributes consist of arbitrary
sequences of alphanumeric characters (as well as underscore '_',
period '.' and hyphen '-'), beginning with a letter or
underscore. (However names commencing with underscore are reserved for
system use.) Case is significant in netCDF names. A zero-length name
is not allowed.

The maximum allowable number of characters
 is \fBNF_MAX_NAME\fR.
.TP
integer \fIxtype\fP
specifies the external data type of a netCDF variable or attribute and
is one of the following:
\fBNF_BYTE\fR, \fBNF_CHAR\fR, \fBNF_SHORT\fR, \fBNF_INT\fR,
\fBNF_FLOAT\fR, or \fBNF_DOUBLE\fR for CDF-1 and CDF-2 file formats.
These are used to specify 8-bit integers,
characters, 16-bit integers, 32-bit integers, 32-bit IEEE floating point
numbers, and 64-bit IEEE floating-point numbers, respectively.

CDF-5 defines additional external types:
\fBNF_UBYTE\fR, \fBNF_USHORT\fR, \fBNF_UINT\fR, \fBNF_INT64\fR, and \fBNF_UINT64\fR.
.TP
integer \fIdimids\fP(1)
is a vector of dimension ID's and defines the shape of a netCDF variable.
The size of the vector shall be greater than or equal to the
rank (i.e. the number of dimensions) of the variable (\fIndims\fP).
The vector shall be ordered by the speed with which a dimension varies:
\fIdimids\fP(1)
shall be the dimension ID of the most rapidly
varying dimension and
\fIdimids\fP(\fIndims\fP)
shall be the dimension ID of the most slowly
varying dimension.
The maximum possible number of
dimensions for a variable is given by the symbolic constant
\fBNF_MAX_VAR_DIMS\fR.
.TP
integer \fIdimid\fP
is the ID of a netCDF dimension.
netCDF dimension ID's are allocated sequentially from the
positive
integers beginning with 1.
.TP
integer \fIndims\fP
is either the total number of dimensions in a netCDF dataset or the rank
(i.e. the number of dimensions) of a netCDF variable.
The value shall not be negative or greater than the symbolic constant
\fBNF_MAX_VAR_DIMS\fR.
.TP
integer \fIvarid\fP
is the ID of a netCDF variable or (for the attribute-access functions)
the symbolic constant
\fBNF_GLOBAL\fR,
which is used to reference global attributes.
netCDF variable ID's are allocated sequentially from the
positive
integers beginning with 1.
.TP
integer \fInatts\fP
is the number of global attributes in a netCDF dataset  for the
\fBnfmpi_inquire(\|)\fR
function or the number
of attributes associated with a netCDF variable for the
\fBnfmpi_varinq(\|)\fR
function.
.TP
integer(kind=MPI_OFFSET) \fIindex\fP(1)
specifies the  coordinates of the netCDF data value to be accessed.
The indices start at 1;
thus, for example, the first data value of a
two-dimensional variable is (1,1).
The size of the vector shall be at least the rank of the associated
netCDF variable and its elements shall correspond, in order, to the
variable's dimensions.
.TP
integer(kind=MPI_OFFSET) \fIstart\fP(1)
specifies the starting point
for accessing a netCDF variable's data values
in terms of the indicial coordinates of
the corner of the array section.
The indices start at 1;
thus, the first data
value of a variable is (1, 1, ..., 1).
The size of the vector shall be at least the rank of the associated
netCDF variable and its elements shall correspond, in order, to the
variable's dimensions.
.TP
integer(kind=MPI_OFFSET) \fIcount\fP(1)
specifies the number of indices selected along each dimension of the
array section.
Thus, to access a single value, for example, specify \fIcount\fP as
(1, 1, ..., 1).
Note that, for strided I/O, this argument must be adjusted
to be compatible with the \fIstride\fP and \fIstart\fP arguments so that
the interaction of the
three does not attempt to access an invalid data co-ordinate.
The elements of the
\fIcount\fP vector correspond, in order, to the variable's dimensions.
.TP
integer(kind=MPI_OFFSET) \fIstride\fP(1)
specifies the sampling interval along each dimension of the netCDF
variable.   The elements of the stride vector correspond, in order,
to the netCDF variable's dimensions (\fIstride\fP(1))
gives the sampling interval along the most rapidly
varying dimension of the netCDF variable).  Sampling intervals are
specified in type-independent units of elements (a value of 1 selects
consecutive elements of the netCDF variable along the corresponding
dimension, a value of 2 selects every other element, etc.).

.TP
integer(kind=MPI_OFFSET) \fIimap\fP(1)
specifies the mapping between the dimensions of a netCDF variable and
the in-memory structure of the internal data array.  The elements of
the index mapping vector correspond, in order, to the netCDF variable's
dimensions (\fIimap\fP(1) gives the distance
between elements of the internal array corresponding to the most
rapidly varying dimension of the netCDF variable).
Distances between elements are specified in type-independent units of
elements (the distance between internal elements that occupy adjacent
memory locations is 1 and not the element's byte-length as in netCDF 2).

.SH "VARIABLE PREFILLING"
.LP
Prior to version 1.6.1, PnetCDF does not support data filling.
The default fill mode in PnetCDF is \fBNF_NOFILL\fR
This contrary to netCDF library whose default is \fBNF_FILL\fR
When fill mode is enabled, PnetCDF sets the values of
all newly-defined variables of finite length (i.e. those that do not have
an unlimited, dimension) to the type-dependent fill-value associated with each
variable.  This is done when \fBnfmpi_enddef(\|)\fR is called.  The
fill-value for a variable may be changed from the default value by
defining the attribute `\fB_FillValue\fR' for the variable.  This
attribute must have the same type as the variable and be of length one.
.LP
Variables with an unlimited dimension are not prefilled in PnetCDF.
This is also contrary to netCDF, which does prefill record variables.
In PnetCDF, filling a record variable must be done by calling
\fBnfmpi_fill_var_rec(\|)\fR. Note this fills only one record of
a variable.
.LP
The fill mode for the entire file can be set by \fBnfmpi_set_fill(\|)\fR.
Per-variable fill mode setting is also available through
\fBnfmpi_def_var_fill(\|)\fR.
In PnetCDF, changing fill mode must be done in define mode.
In netCDF, it is true only for fixed-size variables.
For record variables, changing fill mode can be made at any time in NetCDF.
.SH "ENVIRONMENT VARIABLES"
.TP 4
.B PNETCDF_SAFE_MODE
Set to 1 to enable metadata consistency check. Warning messages will
be printed to stdout if any inconsistency is detected.
.SH "MAILING-LISTS"
.LP
A mailing list is available for
discussion of the PnetCDF interface and announcements about PnetCDF bugs,
fixes, and enhancements.
To subscribe or unsubscribe to the PnetCDF mailing list,
visit https://lists.mcs.anl.gov/mailman/listinfo/parallel-netcdf
.RE
.SH "SEE ALSO"
.LP
.BR ncmpidump (1),
.BR ncmpigen (1),
.BR ncmpidiff (1),
.BR ncvalidator (1),
.BR pnetcdf (3f).
.SH DATE
February 21, 2022
.LP
\fIPnetCDF User's Guide\fP, published
by Northwestern University and Argonne National Laboratory.
This document is adopted from the
\fInetCDF User's Guide\fP, developed at
the Unidata Program Center, University Corporation for Atmospheric
Research, located in Boulder, Colorado.

PnetCDF home page at https://parallel-netcdf.github.io
