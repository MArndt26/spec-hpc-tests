
__global__ void cg_init_u(
		const int x_inner,
		const int y_inner,
		const int z_inner,
		const int coefficient,
		const double* density,
		const double* energy1,
		double* vec_u,
		double* vec_p,
		double* vec_r,
		double* vec_d)
{
	const int gid = threadIdx.x+blockIdx.x*blockDim.x;
	if(gid >= x_inner*y_inner*z_inner) return;

	const int index = gid;

	vec_p[index] = 0.0;
	vec_r[index] = 0.0;
	vec_u[index] = energy1[index]*density[index];

	vec_d[index] = (coefficient == conductivity)
		? density[index] : 1.0/density[index];
}

__global__ void cg_init_k(
		const int x_inner,
		const int y_inner,
		const int z_inner,
        const int halo_depth,
		const double* vec_d,
		double* vec_kx,
		double* vec_ky,
		double* vec_kz,
		double rx,
		double ry,
		double rz)
{
	const int gid = threadIdx.x+blockIdx.x*blockDim.x;
	if(gid >= x_inner*y_inner*z_inner) return;

    const int x = x_inner + 2*halo_depth;
    const int y = y_inner + 2*halo_depth;
    const int page = x*y;
	const int col = gid % x_inner;
	const int row = (gid/x_inner) % y_inner; 
	const int slice = gid / (x_inner*y_inner); 
	const int off0 = halo_depth*(page+x+1);
	const int index = off0+col+row*x+slice*page;

	kx[index] = rx*(vec_d[index-1]+vec_d[index])/(2.0*vec_d[index-1]*vec_d[index]);
	ky[index] = ry*(vec_d[index-x]+vec_d[index])/(2.0*vec_d[index-x]*vec_d[index]);
	kz[index] = rz*(vec_d[index-page]+vec_d[index])/(2.0*vec_d[index-page]*vec_d[index]);
}

__global__ void cg_init_others(
		const int x_inner,
		const int y_inner,
		const int z_inner,
        const int halo_depth,
		const double* vec_u,
		const double* vec_kx,
		const double* vec_ky,
		const double* vec_kz,
		double* vec_p,
		double* vec_r,
		double* vec_w,
		double* vec_mi,
		double* vec_z,
		double* rro)
{
	const int gid = threadIdx.x + blockIdx.x*blockDim.x;
	__shared__ double rro_shared[block_size];
	rro_shared[threadIdx.x] = 0.0;

	if(gid < x_inner*y_inner*z_inner)
	{
        const int x = x_inner + 2*halo_depth;
        const int y = y_inner + 2*halo_depth;
        const int page = x*y;
		const int col = gid%x_inner;
		const int row = (gid/x_inner)%y_inner; 
		const int slice = gid/(x_inner*y_inner); 
		const int off0 = halo_depth*(page+x+1);
		const int index = off0+col+row*x+slice*page;

		const double smvp = SMVP(vec_u);

		vec_w[index] = smvp;
		vec_r[index] = vec_u[index]-vec_w[index];

		if(preconditioner)
		{
			vec_mi[index] = (1.0
					+ (vec_kx[index+1]+vec_kx[index])
					+ (vec_ky[index+x]+vec_ky[index])
					+ (vec_kz[index+page]+vec_kz[index]));
			vec_mi[index] = 1.0/vec_mi[index];
			vec_z[index] = vec_mi[index]*vec_r[index];
			vec_p[index] = vec_z[index];
			rro_shared[threadIdx.x] = vec_r[index]*vec_z[index];
		}
		else
		{
			vec_p[index] = vec_r[index];
			rro_shared[threadIdx.x] = vec_r[index]*vec_r[index];
		}
	}

	reduce<double, block_size/2>::run(rro_shared, rro, sum);
}

__global__ void cuknlcgcalcw(
		const int x_inner,
		const int y_inner,
		const int z_inner,
        const int halo_depth,
		const double* vec_kx,
		const double* vec_ky,
		const double* vec_kz,
		const double* vec_p,
		double* vec_pw,
		double* vec_w)
{
	const int gid = threadIdx.x+blockIdx.x*blockDim.x;
	__shared__ double pw_shared[block_size];
	pw_shared[threadIdx.x] = 0.0;

	if(gid < x_inner*y_inner*z_inner)
	{
		const int x = x_inner + 2*halo_depth;
        const int y = y_inner + 2*halo_depth;
        const int page = x*y;
		const int col = gid%x_inner;
		const int row = (gid/x_inner)%y_inner; 
		const int slice = gid/(x_inner*y_inner); 
		const int off0 = halo_depth*(page+x+1);
		const int index = off0+col+row*x+slice*page;

		const double smvp = SMVP(vec_p);
		vec_w[index] = smvp;
		pw_shared[threadIdx.x] = vec_w[index]*vec_p[index];
	}

	reduce<double, block_size/2>::run(pw_shared, pw, sum);
}

__global__ void cuknlcgcalcur(
		const int x_inner,
		const int y_inner,
		const int z_inner,
		const int halo_depth,
		const double alpha,
		const double* vec_p,
		const double* vec_w,
		double* vec_u,
		double* vec_r,
		double* rrn)
{
	const int gid = threadIdx.x+blockIdx.x*blockDim.x;
	__shared__ double rrn_shared[block_size];
	rrn_shared[threadIdx.x] = 0.0;

	if(gid < x_inner*y_inner*z_inner)
	{
        const int x = x_inner + 2*halo_depth;
        const int y = y_inner + 2*halo_depth;
        const int page = x*y;
		const int col = gid%x_inner;
		const int row = (gid/x_inner)%y_inner; 
		const int slice = gid/(x_inner*y_inner); 
		const int off0 = halo_depth*(page+x+1);
		const int index = off0+col+row*x+slice*page;

		vec_u[index] += alpha*vec_p[index];
		vec_r[index] -= alpha*vec_w[index];
		rrn_shared[threadIdx.x]  = vec_r[index]*vec_r[index];
	}

	reduce<double, block_size/2>::run(rrn_shared, rrn, sum);
}

__global__ void cg_calc_p(
		const int x_inner,
		const int y_inner,
		const int z_inner,
        const int halo_depth,
		const double beta,
		const double* vec_r,
		double* vec_p)
{
	const int gid = threadIdx.x+blockIdx.x*blockDim.x;
	if(gid >= x_inner*y_inner*z_inner) return;

    const int x = x_inner + 2*halo_depth;
    const int y = y_inner + 2*halo_depth;
    const int page = x*y;
    const int col = gid%x_inner;
    const int row = (gid/x_inner)%y_inner; 
    const int slice = gid/(x_inner*y_inner); 
    const int off0 = halo_depth*(page+x+1);
    const int index = off0+col+row*x+slice*page;

    vec_p[index] = vec_r[index] + beta*vec_p[index];
}

